{"version":3,"sources":["@core/components/card-actions/index.js","views/ui-elements/cards/actions/index.js","@core/components/breadcrumbs/index.js","@core/components/ui-loader/index.js"],"names":["CardActions","props","title","actions","children","collapseIcon","reloadIcon","removeIcon","endReload","reload","setReload","useState","collapse","setCollapse","visibility","setVisibility","Icons","ChevronDown","remove","X","RotateCw","callAction","action","removeReload","useEffect","CollapseWrapper","includes","Collapse","Fragment","BlockUiWrapper","UiLoader","blocking","className","classnames","tag","Array","isArray","map","i","Tag","length","size","onClick","renderIcons","isOpen","breadCrumbTitle","breadCrumbParent","breadCrumbActive","sm","endLoading","setTimeout","responsive","bordered","md","BreadCrumbs","breadCrumbParent2","breadCrumbParent3","to","active","color","end","Link","UILoader","loader","overlayColor","show","style","backgroundColor","defaultProps"],"mappings":"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","file":"static/js/51.93645799.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Fragment, useState, useEffect } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport UiLoader from '@components/ui-loader'\r\nimport { ChevronDown, RotateCw, X } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardTitle, Collapse } from 'reactstrap'\r\n\r\nconst CardActions = props => {\r\n  // ** Props\r\n  const { title, actions, children, collapseIcon, reloadIcon, removeIcon, endReload } = props\r\n\r\n  // ** States\r\n  const [reload, setReload] = useState(false)\r\n  const [collapse, setCollapse] = useState(true)\r\n  const [visibility, setVisibility] = useState(true)\r\n\r\n  /**\r\n   ** If custom icon is defined then consider that else default icons\r\n   */\r\n  const Icons = {\r\n    collapse: collapseIcon ? collapseIcon : ChevronDown,\r\n    remove: removeIcon ? removeIcon : X,\r\n    reload: reloadIcon ? reloadIcon : RotateCw\r\n  }\r\n\r\n  // ** Action to call\r\n  const callAction = action => {\r\n    switch (action) {\r\n      case 'collapse':\r\n        return setCollapse(!collapse)\r\n      case 'remove':\r\n        return setVisibility(false)\r\n      case 'reload':\r\n        return setReload(true)\r\n      default:\r\n    }\r\n  }\r\n\r\n  // ** Renders card actions\r\n  const renderIcons = () => {\r\n    /**\r\n     ** IF: user passes array of actions then loop through them & render all of the actions\r\n     ** ELSE: render single action\r\n     */\r\n\r\n    if (Array.isArray(actions)) {\r\n      return actions.map((action, i) => {\r\n        const Tag = Icons[action]\r\n        return (\r\n          <Tag\r\n            key={i}\r\n            className={classnames('cursor-pointer', {\r\n              'me-50': i < actions.length - 1\r\n            })}\r\n            size={15}\r\n            onClick={() => callAction(action)}\r\n          />\r\n        )\r\n      })\r\n    } else {\r\n      const Tag = Icons[actions]\r\n      return <Tag className='cursor-pointer' size={15} onClick={() => callAction(actions)} />\r\n    }\r\n  }\r\n\r\n  // ** Ends reload\r\n  const removeReload = () => {\r\n    setReload(false)\r\n  }\r\n\r\n  // ** If user passes endReload function call it.\r\n  useEffect(() => {\r\n    if (reload) {\r\n      endReload(removeReload)\r\n    }\r\n  })\r\n\r\n  // ** If user passes collapse action then return <Collapse> as Wrapper else return <Fragment>\r\n  const CollapseWrapper = actions === 'collapse' || actions.includes('collapse') ? Collapse : Fragment\r\n\r\n  // ** If user passes reload action then return <BlockUi> as Wrapper else return <Fragment>\r\n  const BlockUiWrapper = actions === 'reload' || actions.includes('reload') ? UiLoader : Fragment\r\n\r\n  return (\r\n    <BlockUiWrapper\r\n      /*eslint-disable */\r\n      {...(actions === 'reload' || actions.includes('reload')\r\n        ? {\r\n            blocking: reload\r\n          }\r\n        : {})}\r\n      /*eslint-enable */\r\n    >\r\n      <Card\r\n        className={classnames('card-action', {\r\n          'd-none': !visibility\r\n        })}\r\n      >\r\n        <CardHeader>\r\n          <CardTitle tag='h4'>{title}</CardTitle>\r\n          <div className='action-icons'>{renderIcons()}</div>\r\n        </CardHeader>\r\n        <CollapseWrapper {...(actions === 'collapse' || actions.includes('collapse') ? { isOpen: collapse } : {})}>\r\n          {children}\r\n        </CollapseWrapper>\r\n      </Card>\r\n    </BlockUiWrapper>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n\r\n// ** PropTypes\r\nCardActions.propTypes = {\r\n  removeIcon: PropTypes.any,\r\n  reloadIcon: PropTypes.any,\r\n  collapseIcon: PropTypes.any,\r\n  title: PropTypes.string.isRequired,\r\n  actions: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,\r\n  endReload(props) {\r\n    // ** User passes reload action and doesn't pass endReload then return Error\r\n    if (\r\n      (props['actions'] === 'reload' && props['endReload'] === undefined) ||\r\n      (props['actions'].includes('reload') && props['endReload'] === undefined)\r\n    ) {\r\n      return new Error('Please provide a function to end reload!')\r\n    }\r\n  }\r\n}\r\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Custom Components\r\nimport Breadcrumbs from '@components/breadcrumbs'\r\nimport CardAction from '@components/card-actions'\r\n\r\n// ** Icons Imports\r\nimport { ChevronDown, RotateCw, X } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { CardBody, CardText, Row, Col, Table } from 'reactstrap'\r\n\r\nconst CardActions = () => {\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumbs breadCrumbTitle='Card Actions' breadCrumbParent='Card' breadCrumbActive='Card Actions' />\r\n      <Row>\r\n        <Col sm='12'>\r\n          <CardAction\r\n            title='Card Actions'\r\n            actions={['collapse', 'reload', 'remove']}\r\n            endReload={endLoading => {\r\n              setTimeout(() => endLoading(), 2000)\r\n            }}\r\n          >\r\n            <CardBody className='pt-0'>\r\n              <Table responsive bordered>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Action</th>\r\n                    <th>Icon</th>\r\n                    <th>Details</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>Collapse</td>\r\n                    <td className='text-center'>\r\n                      <ChevronDown className='collapse-icon' size={15} />\r\n                    </td>\r\n                    <td> Collapse card content using collapse action.</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Refresh Content</td>\r\n                    <td className='text-center'>\r\n                      <RotateCw size={15} />\r\n                    </td>\r\n                    <td>Refresh your card content using refresh action.</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Remove Card</td>\r\n                    <td className='text-center'>\r\n                      <X size={15} />\r\n                    </td>\r\n                    <td> Remove card from page using remove card action</td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n            </CardBody>\r\n          </CardAction>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col md='6' sm='12'>\r\n          <CardAction title='Collapse' actions='collapse'>\r\n            <CardBody className='pt-0'>\r\n              <CardText>\r\n                You can create a collapsible content by using our <code>CardAction</code> component and by passing prop{' '}\r\n                <code>actions='collapse'</code>.\r\n              </CardText>\r\n              <CardText className='mb-0'>\r\n                Click on <ChevronDown size={15} /> to see card collapse in action\r\n              </CardText>\r\n            </CardBody>\r\n          </CardAction>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <CardAction\r\n            title='Reload'\r\n            actions='reload'\r\n            endReload={endLoading => {\r\n              setTimeout(() => endLoading(), 2000)\r\n            }}\r\n          >\r\n            <CardBody className='pt-0'>\r\n              <CardText>\r\n                To create a re-loadable card pass prop <code>actions='reload'</code> and pass prop{' '}\r\n                <code>endReload</code> to end the loading.\r\n              </CardText>\r\n              <CardText className='mb-0'>\r\n                Click on <RotateCw size={15} /> to see card refresh in action\r\n              </CardText>\r\n            </CardBody>\r\n          </CardAction>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <CardAction title='Remove' actions='remove'>\r\n            <CardBody className='pt-0'>\r\n              <CardText>\r\n                You can add refresh content action to card by adding class <code>.card-reload</code> with your card tag,\r\n                and add conditional spinner into card body to show when card is refreshing.\r\n              </CardText>\r\n              <CardText className='mb-0'>\r\n                Click on <RotateCw size={15} /> to see card refresh in action\r\n              </CardText>\r\n            </CardBody>\r\n          </CardAction>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default CardActions\r\n","// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Breadcrumb,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  BreadcrumbItem,\r\n  DropdownToggle,\r\n  UncontrolledButtonDropdown\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-md-9 col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {breadCrumbTitle ? <h2 className='content-header-title float-start mb-0'>{breadCrumbTitle}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/'>Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem tag='li' className='text-primary'>\r\n                  {breadCrumbParent}\r\n                </BreadcrumbItem>\r\n                {breadCrumbParent2 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent2}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbParent3 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent3}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                <BreadcrumbItem tag='li' active>\r\n                  {breadCrumbActive}\r\n                </BreadcrumbItem>\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='content-header-right text-md-end col-md-3 col-12 d-md-block d-none'>\r\n        <div className='breadcrumb-right dropdown'>\r\n          <UncontrolledButtonDropdown>\r\n            <DropdownToggle color='primary' size='sm' className='btn-icon btn-round dropdown-toggle'>\r\n              <Grid size={14} />\r\n            </DropdownToggle>\r\n            <DropdownMenu tag='ul' end>\r\n              <DropdownItem tag={Link} to='/apps/focus'>\r\n                <CheckSquare className='me-1' size={14} />\r\n                <span className='align-middle'>Focus</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/instafriend'>\r\n                <MessageSquare className='me-1' size={14} />\r\n                <span className='align-middle'>Instafriend</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/tellfari'>\r\n                <Mail className='me-1' size={14} />\r\n                <span className='align-middle'>Tellfari</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/book'>\r\n                <Calendar className='me-1' size={14} />\r\n                <span className='align-middle'>Book</span>\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledButtonDropdown>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  breadCrumbTitle: Proptypes.string.isRequired,\r\n  breadCrumbActive: Proptypes.string.isRequired\r\n}\r\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport classnames from 'classnames'\r\n\r\n// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\n// ** Styles\r\nimport './ui-loader.scss'\r\n\r\nconst UILoader = props => {\r\n  const { children, blocking, loader, className, tag, overlayColor } = props\r\n\r\n  const Tag = tag\r\n\r\n  return (\r\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\r\n      {children}\r\n      {blocking ? (\r\n        <Fragment>\r\n          <div\r\n            className='overlay' /*eslint-disable */\r\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\r\n            /*eslint-enable */\r\n          ></div>\r\n          <div className='loader'>{loader}</div>\r\n        </Fragment>\r\n      ) : null}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport default UILoader\r\n\r\nUILoader.defaultProps = {\r\n  tag: 'div',\r\n  blocking: false,\r\n  loader: <Spinner color='primary' />\r\n}\r\n\r\nUILoader.propTypes = {\r\n  tag: Proptypes.string,\r\n  loader: Proptypes.any,\r\n  className: Proptypes.string,\r\n  overlayColor: Proptypes.string,\r\n  blocking: Proptypes.bool.isRequired\r\n}\r\n"],"sourceRoot":""}