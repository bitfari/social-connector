{"version":3,"sources":["views/extensions/import-export/Import.js","@core/components/avatar/index.js","@core/components/extensions-header/index.js"],"names":["ErrorToast","className","size","color","icon","role","Import","name","setName","useState","value","setValue","tableData","setTableData","filteredData","setFilteredData","getRootProps","getInputProps","useDropzone","multiple","onDrop","result","reader","FileReader","onload","fileData","wb","XLSX","read","type","SheetNames","forEach","sheetName","arr","getTableData","utils","sheet_to_row_object_array","Sheets","length","endsWith","readAsBinaryString","toast","error","hideProgressBar","headArr","map","col","index","Object","keys","dataArr","title","subTitle","link","sm","href","onClick","e","preventDefault","tag","for","id","bsSize","onChange","data","target","filter","startsWithCondition","key","toString","toLowerCase","startsWith","includesCondition","includes","handleFilter","responsive","head","renderTd","Avatar","forwardRef","props","ref","img","status","badgeUp","content","Tag","initials","imgWidth","badgeText","imgHeight","badgeColor","imgClassName","contentStyles","rest","classnames","undefined","style","str","results","split","push","join","getInitials","pill","src","alt","height","width","defaultProps","ExtensionsHeader","rel"],"mappings":"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","file":"static/js/34.e2f2303b.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport XLSX from 'xlsx'\r\nimport { toast } from 'react-toastify'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { X, DownloadCloud } from 'react-feather'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\nimport ExtensionsHeader from '@components/extensions-header'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col, Card, CardBody, Table, CardHeader, CardTitle, Input, Label } from 'reactstrap'\r\n\r\n// ** Styles\r\nimport '@styles/react/libs/file-uploader/file-uploader.scss'\r\n\r\nconst ErrorToast = () => (\r\n  <Fragment>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color='danger' icon={<X size={12} />} />\r\n        <h6 className='toast-title'>Error!</h6>\r\n      </div>\r\n      <small className='text-muted'>a second ago</small>\r\n    </div>\r\n    <div className='toastify-body'>\r\n      <span role='img' aria-label='toast-text'>\r\n        ðŸ‘‹ You can only upload <span className='fw-bolder'>.xlsx</span>, <span className='fw-bolder'>.xls</span> &{' '}\r\n        <span className='fw-bolder'>.csv</span> Files!.\r\n      </span>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst Import = () => {\r\n  // ** States\r\n  const [name, setName] = useState('')\r\n  const [value, setValue] = useState('')\r\n  const [tableData, setTableData] = useState([])\r\n  const [filteredData, setFilteredData] = useState([])\r\n\r\n  const getTableData = (arr, name) => {\r\n    setTableData(arr)\r\n    setName(name)\r\n  }\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    multiple: false,\r\n    onDrop: result => {\r\n      const reader = new FileReader()\r\n      reader.onload = function () {\r\n        const fileData = reader.result\r\n        const wb = XLSX.read(fileData, { type: 'binary' })\r\n\r\n        wb.SheetNames.forEach(function (sheetName) {\r\n          const rowObj = XLSX.utils.sheet_to_row_object_array(wb.Sheets[sheetName])\r\n          getTableData(rowObj, result[0].name)\r\n        })\r\n      }\r\n      if (result.length && result[0].name.endsWith('xlsx')) {\r\n        reader.readAsBinaryString(result[0])\r\n      } else {\r\n        toast.error(<ErrorToast />, { icon: false, hideProgressBar: true })\r\n      }\r\n    }\r\n  })\r\n\r\n  const handleFilter = e => {\r\n    const data = tableData\r\n    let filteredData = []\r\n    const value = e.target.value\r\n    setValue(value)\r\n\r\n    if (value.length) {\r\n      filteredData = data.filter(col => {\r\n        const keys = Object.keys(col)\r\n\r\n        const startsWithCondition = keys.filter(key => {\r\n          return col[key].toString().toLowerCase().startsWith(value.toLowerCase())\r\n        })\r\n\r\n        const includesCondition = keys.filter(key => col[key].toString().toLowerCase().includes(value.toLowerCase()))\r\n\r\n        if (startsWithCondition.length) return col[startsWithCondition]\r\n        else if (!startsWithCondition && includesCondition.length) return col[includesCondition]\r\n        else return null\r\n      })\r\n      setFilteredData(filteredData)\r\n      setValue(value)\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n  /*eslint-disable */\r\n  const headArr = tableData.length\r\n    ? tableData.map((col, index) => {\r\n        if (index === 0) return [...Object.keys(col)]\r\n        else return null\r\n      })\r\n    : []\r\n  /*eslint-enable */\r\n  const dataArr = value.length ? filteredData : tableData.length && !value.length ? tableData : null\r\n\r\n  const renderTableBody = () => {\r\n    if (dataArr !== null && dataArr.length) {\r\n      return dataArr.map((col, index) => {\r\n        const keys = Object.keys(col)\r\n        const renderTd = keys.map((key, index) => <td key={index}>{col[key]}</td>)\r\n        return <tr key={index}>{renderTd}</tr>\r\n      })\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  const renderTableHead = () => {\r\n    if (headArr.length) {\r\n      return headArr[0].map((head, index) => {\r\n        return <th key={index}>{head}</th>\r\n      })\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <ExtensionsHeader\r\n        title='XLSX'\r\n        subTitle='Xlsx is a parser and writer for various spreadsheet formats'\r\n        link='https://github.com/SheetJS/sheetjs'\r\n      />\r\n      <Row className='import-component'>\r\n        <Col sm='12'>\r\n          <Card>\r\n            <CardBody>\r\n              <Row>\r\n                <Col sm='12'>\r\n                  <div {...getRootProps({ className: 'dropzone' })}>\r\n                    <input {...getInputProps()} />\r\n                    <div className='d-flex align-items-center justify-content-center flex-column'>\r\n                      <DownloadCloud size={64} />\r\n                      <h5>Drop Files here or click to upload</h5>\r\n                      <p className='text-secondary'>\r\n                        Drop files here or click{' '}\r\n                        <a href='/' onClick={e => e.preventDefault()}>\r\n                          browse\r\n                        </a>{' '}\r\n                        thorough your machine\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n        {tableData.length ? (\r\n          <Col sm='12'>\r\n            <Card>\r\n              <CardHeader className='justify-content-between flex-wrap'>\r\n                <CardTitle tag='h4'>{name}</CardTitle>\r\n                <div className='d-flex align-items-center justify-content-end'>\r\n                  <Label for='search-input' className='me-1'>\r\n                    Search\r\n                  </Label>\r\n                  <Input id='search-input' type='text' bsSize='sm' value={value} onChange={e => handleFilter(e)} />\r\n                </div>\r\n              </CardHeader>\r\n              <Table className='table-hover-animation' responsive>\r\n                <thead>\r\n                  <tr>{renderTableHead()}</tr>\r\n                </thead>\r\n                <tbody>{renderTableBody()}</tbody>\r\n              </Table>\r\n            </Card>\r\n          </Col>\r\n        ) : null}\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Import\r\n","// ** React Imports\r\nimport { forwardRef } from 'react'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport classnames from 'classnames'\r\n\r\n// ** Reactstrap Imports\r\nimport { Badge } from 'reactstrap'\r\n\r\nconst Avatar = forwardRef((props, ref) => {\r\n  // ** Props\r\n  const {\r\n    img,\r\n    size,\r\n    icon,\r\n    color,\r\n    status,\r\n    badgeUp,\r\n    content,\r\n    tag: Tag,\r\n    initials,\r\n    imgWidth,\r\n    className,\r\n    badgeText,\r\n    imgHeight,\r\n    badgeColor,\r\n    imgClassName,\r\n    contentStyles,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** Function to extract initials from content\r\n  const getInitials = str => {\r\n    const results = []\r\n    const wordArray = str.split(' ')\r\n    wordArray.forEach(e => {\r\n      results.push(e[0])\r\n    })\r\n    return results.join('')\r\n  }\r\n\r\n  return (\r\n    <Tag\r\n      className={classnames('avatar', {\r\n        [className]: className,\r\n        [`bg-${color}`]: color,\r\n        [`avatar-${size}`]: size\r\n      })}\r\n      ref={ref}\r\n      {...rest}\r\n    >\r\n      {img === false || img === undefined ? (\r\n        <span\r\n          className={classnames('avatar-content', {\r\n            'position-relative': badgeUp\r\n          })}\r\n          style={contentStyles}\r\n        >\r\n          {initials ? getInitials(content) : content}\r\n\r\n          {icon ? icon : null}\r\n          {badgeUp ? (\r\n            <Badge color={badgeColor ? badgeColor : 'primary'} className='badge-sm badge-up' pill>\r\n              {badgeText ? badgeText : '0'}\r\n            </Badge>\r\n          ) : null}\r\n        </span>\r\n      ) : (\r\n        <img\r\n          className={classnames({\r\n            [imgClassName]: imgClassName\r\n          })}\r\n          src={img}\r\n          alt='avatarImg'\r\n          height={imgHeight && !size ? imgHeight : 32}\r\n          width={imgWidth && !size ? imgWidth : 32}\r\n        />\r\n      )}\r\n      {status ? (\r\n        <span\r\n          className={classnames({\r\n            [`avatar-status-${status}`]: status,\r\n            [`avatar-status-${size}`]: size\r\n          })}\r\n        ></span>\r\n      ) : null}\r\n    </Tag>\r\n  )\r\n})\r\n\r\nexport default Avatar\r\n\r\n// ** PropTypes\r\nAvatar.propTypes = {\r\n  icon: Proptypes.node,\r\n  src: Proptypes.string,\r\n  badgeUp: Proptypes.bool,\r\n  content: Proptypes.string,\r\n  badgeText: Proptypes.string,\r\n  className: Proptypes.string,\r\n  imgClassName: Proptypes.string,\r\n  contentStyles: Proptypes.object,\r\n  size: Proptypes.oneOf(['sm', 'lg', 'xl']),\r\n  tag: Proptypes.oneOfType([Proptypes.func, Proptypes.string]),\r\n  status: Proptypes.oneOf(['online', 'offline', 'away', 'busy']),\r\n  imgHeight: Proptypes.oneOfType([Proptypes.string, Proptypes.number]),\r\n  imgWidth: Proptypes.oneOfType([Proptypes.string, Proptypes.number]),\r\n  badgeColor: Proptypes.oneOf([\r\n    'primary',\r\n    'secondary',\r\n    'success',\r\n    'danger',\r\n    'info',\r\n    'warning',\r\n    'dark',\r\n    'light-primary',\r\n    'light-secondary',\r\n    'light-success',\r\n    'light-danger',\r\n    'light-info',\r\n    'light-warning',\r\n    'light-dark'\r\n  ]),\r\n  color: Proptypes.oneOf([\r\n    'primary',\r\n    'secondary',\r\n    'success',\r\n    'danger',\r\n    'info',\r\n    'warning',\r\n    'dark',\r\n    'light-primary',\r\n    'light-secondary',\r\n    'light-success',\r\n    'light-danger',\r\n    'light-info',\r\n    'light-warning',\r\n    'light-dark'\r\n  ]),\r\n  initials(props) {\r\n    if (props['initials'] && props['content'] === undefined) {\r\n      return new Error('content prop is required with initials prop.')\r\n    }\r\n    if (props['initials'] && typeof props['content'] !== 'string') {\r\n      return new Error('content prop must be a string.')\r\n    }\r\n    if (typeof props['initials'] !== 'boolean' && props['initials'] !== undefined) {\r\n      return new Error('initials must be a boolean!')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nAvatar.defaultProps = {\r\n  tag: 'div'\r\n}\r\n","// ** React Imports\r\nimport Proptypes from 'prop-types'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col } from 'reactstrap'\r\n\r\nconst ExtensionsHeader = props => {\r\n  return (\r\n    <Row className='mb-2'>\r\n      <Col sm='12' className='ms-50'>\r\n        <p className='font-medium-5 mt-1 extension-title' data-tour='extension-title'>\r\n          {props.title}\r\n        </p>\r\n        {props.link ? (\r\n          <a href={props.link} target='_blank' rel='noopener noreferrer'>\r\n            {props.subTitle}\r\n          </a>\r\n        ) : (\r\n          <p className='text-primary'>{props.subTitle}</p>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\nexport default ExtensionsHeader\r\n\r\n// ** PropTypes\r\nExtensionsHeader.propTypes = {\r\n  link: Proptypes.string,\r\n  title: Proptypes.string.isRequired,\r\n  subTitle: Proptypes.string.isRequired\r\n}\r\n"],"sourceRoot":""}