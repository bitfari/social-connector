{"version":3,"sources":["views/components/spinners/SpinnerFlex.js","views/components/spinners/SpinnerFloat.js","views/components/spinners/SpinnerSizes.js","views/components/spinners/SpinnerGrowing.js","views/components/spinners/SpinnerBorder.js","views/components/spinners/SpinnerColors.js","views/components/spinners/SpinnerButtons.js","views/components/spinners/SpinnerGrowingColored.js","views/components/spinners/SpinnerTextAlignment.js","views/components/spinners/SpinnerSourceCode.js","views/components/spinners/index.js","@core/components/breadcrumbs/index.js","@core/components/card-snippet/index.js"],"names":["SpinnerFlex","className","SpinnerFloat","SpinnerSizes","size","type","style","height","width","SpinnerGrowing","SpinnerBorder","SpinnerColors","color","SpinnerButton","outline","disabled","SpinnerGrowColors","SpinnerTextAlignment","spinnerBorder","spinnerColors","spinnerGrowing","spinnerGrowColors","spinnerFlex","spinnerFloat","spinnerTextAlignment","spinnerSizes","spinnerButton","Spinners","useEffect","Prism","highlightAll","breadCrumbTitle","breadCrumbParent","breadCrumbActive","md","sm","title","code","SpinnerButtons","BreadCrumbs","props","breadCrumbParent2","breadCrumbParent3","tag","to","active","end","Link","CardSnippet","children","noBody","iconCode","isOpen","setIsOpen","useState","IconCode","Wrapper","Fragment","CardBody","onClick"],"mappings":"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","file":"static/js/92.09c9ba9c.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerFlex = () => {\r\n  return (\r\n    <Fragment>\r\n      <div className='d-flex justify-content-center my-1'>\r\n        <Spinner />\r\n      </div>\r\n\r\n      <div className='d-flex justify-content-between align-items-center'>\r\n        <strong>Loading...</strong>\r\n        <Spinner />\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default SpinnerFlex\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerFloat = () => {\r\n  return <Spinner className='float-end mb-2' />\r\n}\r\nexport default SpinnerFloat\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerSizes = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div>\r\n        <Spinner className='me-25' size='sm' />\r\n        <Spinner type='grow' size='sm' />\r\n      </div>\r\n      <div>\r\n        <Spinner className='me-25' />\r\n        <Spinner type='grow' />\r\n      </div>\r\n      <div>\r\n        <Spinner className='me-25' style={{ height: '3rem', width: '3rem' }} />\r\n        <Spinner type='grow' style={{ height: '3rem', width: '3rem' }} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerSizes\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerGrowing = () => {\r\n  return <Spinner type='grow' />\r\n}\r\nexport default SpinnerGrowing\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerBorder = () => {\r\n  return <Spinner />\r\n}\r\nexport default SpinnerBorder\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerColors = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <Spinner color='primary' />\r\n      <Spinner color='secondary' />\r\n      <Spinner color='success' />\r\n      <Spinner color='danger' />\r\n      <Spinner color='warning' />\r\n      <Spinner color='info' />\r\n      <Spinner color='light' />\r\n      <Spinner color='dark' />\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerColors\r\n","// ** Reactstrap Imports\r\nimport { Button, Spinner } from 'reactstrap'\r\n\r\nconst SpinnerButton = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <Button color='primary' outline disabled>\r\n        <Spinner size='sm' />\r\n      </Button>\r\n\r\n      <Button color='primary' outline disabled>\r\n        <Spinner size='sm' />\r\n        <span className='ms-50'>Loading...</span>\r\n      </Button>\r\n\r\n      <Button color='primary' outline disabled>\r\n        <Spinner size='sm' type='grow' />\r\n      </Button>\r\n\r\n      <Button color='primary' outline disabled>\r\n        <Spinner size='sm' type='grow' />\r\n        <span className='ms-50'>Loading...</span>\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerButton\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerGrowColors = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <Spinner type='grow' color='primary' />\r\n      <Spinner type='grow' color='secondary' />\r\n      <Spinner type='grow' color='success' />\r\n      <Spinner type='grow' color='danger' />\r\n      <Spinner type='grow' color='warning' />\r\n      <Spinner type='grow' color='info' />\r\n      <Spinner type='grow' color='light' />\r\n      <Spinner type='grow' color='dark' />\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerGrowColors\r\n","// ** Reactstrap Imports\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerTextAlignment = () => {\r\n  return (\r\n    <div className='text-center'>\r\n      <Spinner />\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerTextAlignment\r\n","export const spinnerBorder = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerBorder = () => {\r\n  return <Spinner />\r\n}\r\nexport default SpinnerBorder\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerColors = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerColors = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner color='primary' />\r\n      <Spinner color='secondary' />\r\n      <Spinner color='success' />\r\n      <Spinner color='danger' />\r\n      <Spinner color='warning' />\r\n      <Spinner color='info' />\r\n      <Spinner color='light' />\r\n      <Spinner color='dark' />\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default SpinnerColors\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerGrowing = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerGrowing = () => {\r\n  return <Spinner type='grow' color='primary' />\r\n}\r\nexport default SpinnerGrowing\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerGrowColors = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerGrowColors = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Spinner type='grow' color='primary' />\r\n      <Spinner type='grow' color='secondary' />\r\n      <Spinner type='grow' color='success' />\r\n      <Spinner type='grow' color='danger' />\r\n      <Spinner type='grow' color='warning' />\r\n      <Spinner type='grow' color='info' />\r\n      <Spinner type='grow' color='light' />\r\n      <Spinner type='grow' color='dark' />\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default SpinnerGrowColors`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerFlex = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerFlex = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className='d-flex justify-content-center my-1'>\r\n        <Spinner />\r\n      </div>\r\n\r\n      <div className='d-flex justify-content-between align-items-center'>\r\n        <strong>Loading...</strong>\r\n        <Spinner />\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default SpinnerFlex\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerFloat = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerFloat = () => {\r\n  return <Spinner className='float-end mb-2' />\r\n}\r\nexport default SpinnerFloat\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerTextAlignment = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerTextAlignment = () => {\r\n  return (\r\n    <div className='text-center'>\r\n      <Spinner />\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerTextAlignment\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerSizes = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Spinner } from 'reactstrap'\r\n\r\nconst SpinnerSizes = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div>\r\n        <Spinner className='me-25' size='sm' />\r\n        <Spinner type='grow' size='sm' />\r\n      </div>\r\n      <div>\r\n        <Spinner className='me-25' />\r\n        <Spinner type='grow' />\r\n      </div>\r\n      <div>\r\n        <Spinner className='me-25' size='lg' />\r\n        <Spinner type='grow' size='lg' />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerSizes\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerButton = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Button, Spinner } from 'reactstrap'\r\n\r\nconst SpinnerButton = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <Button color='primary'>\r\n        <Spinner color='white' size='sm' />\r\n      </Button>\r\n\r\n      <Button color='primary'>\r\n        <Spinner color='white' size='sm' />\r\n        <span className='ms-50'>Loading...</span>\r\n      </Button>\r\n\r\n      <Button color='primary'>\r\n        <Spinner color='white' size='sm' type='grow' />\r\n      </Button>\r\n\r\n      <Button color='primary'>\r\n        <Spinner color='white' size='sm' type='grow' />\r\n        <span className='ms-50'>Loading...</span>\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\nexport default SpinnerButton\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n","// ** React Imports\r\nimport { Fragment, useEffect } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col, CardText } from 'reactstrap'\r\n\r\n// ** Third Party Components\r\nimport Prism from 'prismjs'\r\n\r\n// ** Custom Components\r\nimport Card from '@components/card-snippet'\r\nimport BreadCrumbs from '@components/breadcrumbs'\r\n\r\n// ** Demo Components\r\nimport SpinnerFlex from './SpinnerFlex'\r\nimport SpinnerFloat from './SpinnerFloat'\r\nimport SpinnerSizes from './SpinnerSizes'\r\nimport SpinnerGrow from './SpinnerGrowing'\r\nimport SpinnerBorder from './SpinnerBorder'\r\nimport SpinnerColors from './SpinnerColors'\r\nimport SpinnerButtons from './SpinnerButtons'\r\nimport SpinnerGrowColors from './SpinnerGrowingColored'\r\nimport SpinnerTextAlignment from './SpinnerTextAlignment'\r\n\r\n// ** Source Code\r\nimport {\r\n  spinnerFlex,\r\n  spinnerFloat,\r\n  spinnerSizes,\r\n  spinnerBorder,\r\n  spinnerButton,\r\n  spinnerColors,\r\n  spinnerGrowing,\r\n  spinnerGrowColors,\r\n  spinnerTextAlignment\r\n} from './SpinnerSourceCode'\r\n\r\nconst Spinners = () => {\r\n  useEffect(() => {\r\n    Prism.highlightAll()\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <BreadCrumbs breadCrumbTitle='Spinners' breadCrumbParent='Components' breadCrumbActive='Spinners' />\r\n      <Row className='match-height'>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Border Spinner' code={spinnerBorder}>\r\n            <CardText>\r\n              Use <code>Spinner</code> tag to create a bordered spinner.\r\n            </CardText>\r\n            <SpinnerBorder />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Colors' code={spinnerColors}>\r\n            <CardText className='mb-0'>\r\n              Use <code>color</code> attribute to create a colored spinner.\r\n            </CardText>\r\n            <SpinnerColors />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Growing Spinner' code={spinnerGrowing}>\r\n            <CardText>\r\n              Use <code>type=\"grow\"</code> with spinner tag to create a growing spinner.\r\n            </CardText>\r\n            <SpinnerGrow />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Colored Growing Spinners' code={spinnerGrowColors}>\r\n            <CardText className='mb-0'>\r\n              Use <code>color</code> and <code>type</code> attribute to create a colored growing spinner.\r\n            </CardText>\r\n            <SpinnerGrowColors />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Flex' code={spinnerFlex}>\r\n            <CardText>\r\n              Use Flexbox utilities to place spinners.Use <code>.d-flex</code> and <code>.justify-content-[side]</code>.\r\n            </CardText>\r\n            <SpinnerFlex />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Float' code={spinnerFloat}>\r\n            <CardText>\r\n              Use <code>.float-[side]</code> with spinner tag to change spinner's position.\r\n            </CardText>\r\n            <SpinnerFloat />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Text Alignment' code={spinnerTextAlignment}>\r\n            <CardText>\r\n              You can also use <code>.text-[side]</code> as a wrapper to spinner tag to change spinner's position.\r\n            </CardText>\r\n            <SpinnerTextAlignment />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Sizes' code={spinnerSizes}>\r\n            <CardText className='mb-0'>\r\n              Use prop <code>size=\"sm\"</code> for Small spinner or use <code>style</code> prop for custom size.\r\n            </CardText>\r\n            <SpinnerSizes />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Buttons' code={spinnerButton}>\r\n            <SpinnerButtons />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Spinners\r\n","// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Breadcrumb,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  BreadcrumbItem,\r\n  DropdownToggle,\r\n  UncontrolledButtonDropdown\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-md-9 col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {breadCrumbTitle ? <h2 className='content-header-title float-start mb-0'>{breadCrumbTitle}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/'>Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem tag='li' className='text-primary'>\r\n                  {breadCrumbParent}\r\n                </BreadcrumbItem>\r\n                {breadCrumbParent2 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent2}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbParent3 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent3}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                <BreadcrumbItem tag='li' active>\r\n                  {breadCrumbActive}\r\n                </BreadcrumbItem>\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='content-header-right text-md-end col-md-3 col-12 d-md-block d-none'>\r\n        <div className='breadcrumb-right dropdown'>\r\n          <UncontrolledButtonDropdown>\r\n            <DropdownToggle color='primary' size='sm' className='btn-icon btn-round dropdown-toggle'>\r\n              <Grid size={14} />\r\n            </DropdownToggle>\r\n            <DropdownMenu tag='ul' end>\r\n              <DropdownItem tag={Link} to='/apps/focus'>\r\n                <CheckSquare className='me-1' size={14} />\r\n                <span className='align-middle'>Focus</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/instafriend'>\r\n                <MessageSquare className='me-1' size={14} />\r\n                <span className='align-middle'>Instafriend</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/tellfari'>\r\n                <Mail className='me-1' size={14} />\r\n                <span className='align-middle'>Tellfari</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/book'>\r\n                <Calendar className='me-1' size={14} />\r\n                <span className='align-middle'>Book</span>\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledButtonDropdown>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  breadCrumbTitle: Proptypes.string.isRequired,\r\n  breadCrumbActive: Proptypes.string.isRequired\r\n}\r\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport { Code } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardBody, CardTitle, Collapse } from 'reactstrap'\r\n\r\nconst CardSnippet = props => {\r\n  // ** Props\r\n  const { title, children, noBody, code, iconCode } = props\r\n\r\n  // ** State\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  // ** If user passes custom icon then render that else render default icon\r\n  const IconCode = iconCode ? iconCode : <Code size={15} />\r\n\r\n  // ** To toggle collapse\r\n  const toggle = () => setIsOpen(!isOpen)\r\n\r\n  // ** If user passes noBody then return <Fragment> else return <CardBody>\r\n  const Wrapper = noBody ? Fragment : CardBody\r\n\r\n  return (\r\n    <Card className='card-snippet'>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>{title}</CardTitle>\r\n        <div className='views cursor-pointer' onClick={toggle}>\r\n          {IconCode}\r\n        </div>\r\n      </CardHeader>\r\n      <Wrapper>{children}</Wrapper>\r\n      <Collapse isOpen={isOpen}>\r\n        <CardBody>{code}</CardBody>\r\n      </Collapse>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CardSnippet\r\n\r\n// ** PropTypes\r\nCardSnippet.propTypes = {\r\n  code: PropTypes.node,\r\n  noBody: PropTypes.bool,\r\n  children: PropTypes.any,\r\n  iconCode: PropTypes.node,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string.isRequired\r\n}\r\n"],"sourceRoot":""}