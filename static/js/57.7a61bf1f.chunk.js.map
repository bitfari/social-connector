{"version":3,"sources":["views/extensions/import-export/ExportSelected.js","@core/components/extensions-header/index.js"],"names":["initialData","id","name","username","email","website","ExportSelected","data","useState","value","setValue","modal","setModal","fileName","setFileName","filteredData","setFilteredData","dataToExport","setDataToExport","fileFormat","setFileFormat","selectedRows","setSelectedRows","toggleModal","renderTableData","map","col","className","classnames","selected","includes","type","onChange","selectedRowsArr","splice","indexOf","push","handleSelect","checked","title","subTitle","link","sm","color","onClick","for","bsSize","e","target","length","filter","startsWithCondition","toLowerCase","startsWith","toString","includesCondition","handleFilter","responsive","label","i","handleSelectAll","isOpen","toggle","onClosed","placeholder","exportArr","item","wb","XLSX","utils","json_to_sheet","wbout","book_new","book_append_sheet","writeFile","handleExport","ExtensionsHeader","props","href","rel"],"mappings":"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","file":"static/js/57.7a61bf1f.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Custom Components\r\nimport ExtensionsHeader from '@components/extensions-header'\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Table,\r\n  Modal,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  CardBody,\r\n  ModalBody,\r\n  ModalHeader,\r\n  ModalFooter\r\n} from 'reactstrap'\r\n\r\n// ** Third Party Components\r\nimport XLSX from 'xlsx'\r\nimport classnames from 'classnames'\r\n\r\nconst initialData = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz',\r\n    website: 'hildegard.org'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv',\r\n    website: 'anastasia.net'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net',\r\n    website: 'ramiro.info'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org',\r\n    website: 'kale.biz'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca',\r\n    website: 'demarco.info'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info',\r\n    website: 'ola.org'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz',\r\n    website: 'elvis.io'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me',\r\n    website: 'jacynthe.com'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io',\r\n    website: 'conrad.com'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz',\r\n    website: 'ambrose.net'\r\n  }\r\n]\r\n\r\nconst ExportSelected = () => {\r\n  // ** States\r\n  const [data] = useState(initialData)\r\n  const [value, setValue] = useState('')\r\n  const [modal, setModal] = useState(false)\r\n  const [fileName, setFileName] = useState('')\r\n  const [filteredData, setFilteredData] = useState([])\r\n  const [dataToExport, setDataToExport] = useState([])\r\n  const [fileFormat, setFileFormat] = useState('xlsx')\r\n  const [selectedRows, setSelectedRows] = useState([])\r\n\r\n  const toggleModal = () => setModal(!modal)\r\n\r\n  const handleFilter = e => {\r\n    let filteredData = []\r\n    const value = e.target.value\r\n    setValue(value)\r\n    if (value.length) {\r\n      filteredData = data.filter(col => {\r\n        const startsWithCondition =\r\n          col.name.toLowerCase().startsWith(value.toLowerCase()) ||\r\n          col.email.toLowerCase().startsWith(value.toLowerCase()) ||\r\n          col.website.toLowerCase().startsWith(value.toLowerCase()) ||\r\n          col.id.toString().toLowerCase().startsWith(value.toLowerCase())\r\n\r\n        const includesCondition =\r\n          col.name.toLowerCase().includes(value.toLowerCase()) ||\r\n          col.email.toLowerCase().includes(value.toLowerCase()) ||\r\n          col.website.toLowerCase().includes(value.toLowerCase()) ||\r\n          col.id.toString().toLowerCase().includes(value.toLowerCase())\r\n\r\n        if (startsWithCondition) return startsWithCondition\r\n        else if (!startsWithCondition && includesCondition) return includesCondition\r\n        else return null\r\n      })\r\n      setValue(value)\r\n      setFilteredData(filteredData)\r\n    }\r\n  }\r\n\r\n  const handleExport = () => {\r\n    const exportArr = dataToExport\r\n    data.map(item => {\r\n      if (selectedRows.includes(item.id)) {\r\n        return exportArr.push(item)\r\n      } else {\r\n        return null\r\n      }\r\n    })\r\n    setDataToExport([...exportArr])\r\n    const name = fileName.length ? `${fileName}.${fileFormat}` : `excel-sheet.${fileFormat}`\r\n    const wb = XLSX.utils.json_to_sheet(dataToExport)\r\n    const wbout = XLSX.utils.book_new()\r\n    XLSX.utils.book_append_sheet(wbout, wb, 'test')\r\n    XLSX.writeFile(wbout, name)\r\n    toggleModal()\r\n  }\r\n\r\n  const handleSelect = id => {\r\n    const selectedRowsArr = selectedRows\r\n    if (!selectedRowsArr.includes(id)) {\r\n      selectedRowsArr.push(id)\r\n    } else if (selectedRowsArr.includes(id)) {\r\n      selectedRowsArr.splice(selectedRowsArr.indexOf(id), 1)\r\n    } else {\r\n      return null\r\n    }\r\n    setSelectedRows([...selectedRowsArr])\r\n  }\r\n\r\n  const handleSelectAll = () => {\r\n    let selectedRowsArr = selectedRows\r\n    if (selectedRowsArr.length < data.length) {\r\n      const ids = data.map(i => i.id)\r\n      selectedRowsArr = ids\r\n    } else if (selectedRowsArr.length === data.length) {\r\n      selectedRowsArr = []\r\n    } else {\r\n      return null\r\n    }\r\n\r\n    setSelectedRows(selectedRowsArr)\r\n  }\r\n\r\n  const array = value ? filteredData : data\r\n  const renderTableData = array.map(col => {\r\n    return (\r\n      <tr\r\n        key={col.id}\r\n        className={classnames({\r\n          selected: selectedRows.includes(col.id)\r\n        })}\r\n      >\r\n        <td>\r\n          <div className='form-check'>\r\n            <Input\r\n              id={col.id}\r\n              type='checkbox'\r\n              onChange={() => handleSelect(col.id)}\r\n              checked={!!selectedRows.includes(col.id)}\r\n            />\r\n          </div>\r\n        </td>\r\n        <td>{col.email}</td>\r\n        <td>{col.name}</td>\r\n        <td>{col.website}</td>\r\n        <td>{col.id}</td>\r\n      </tr>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <Fragment>\r\n      <ExtensionsHeader\r\n        title='XLSX'\r\n        subTitle='Xlsx is a parser and writer for various spreadsheet formats'\r\n        link='https://github.com/SheetJS/sheetjs'\r\n      />\r\n      <Row className='export-component'>\r\n        <Col sm='12'>\r\n          <Card>\r\n            <CardBody className='pb-0'>\r\n              <div className='d-flex flex-wrap justify-content-between'>\r\n                <Button color='primary' onClick={() => toggleModal()}>\r\n                  Export Selected\r\n                </Button>\r\n                <div className='d-flex align-items-center justify-content-end'>\r\n                  <Label for='search-input' className='me-1'>\r\n                    Search\r\n                  </Label>\r\n                  <Input id='search-input' bsSize='sm' type='text' value={value} onChange={e => handleFilter(e)} />\r\n                </div>\r\n              </div>\r\n            </CardBody>\r\n            <Table className='table-hover-animation mt-2' responsive>\r\n              <thead>\r\n                <tr>\r\n                  <th>\r\n                    <div className='form-check'>\r\n                      <Input\r\n                        type='checkbox'\r\n                        id='select-all'\r\n                        label=''\r\n                        checked={!!selectedRows.length}\r\n                        onChange={() => handleSelectAll()}\r\n                      />\r\n                    </div>\r\n                  </th>\r\n                  <th>Email</th>\r\n                  <th>Name</th>\r\n                  <th>Website</th>\r\n                  <th>Rank</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>{renderTableData}</tbody>\r\n            </Table>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={() => toggleModal()}\r\n        className='modal-dialog-centered'\r\n        onClosed={() => setFileName('')}\r\n      >\r\n        <ModalHeader toggle={() => toggleModal()}>Export To Excel</ModalHeader>\r\n        <ModalBody>\r\n          <div className='mb-2'>\r\n            <Input\r\n              type='text'\r\n              value={fileName}\r\n              onChange={e => setFileName(e.target.value)}\r\n              placeholder='Enter File Name'\r\n            />\r\n          </div>\r\n          <div>\r\n            <Input\r\n              type='select'\r\n              id='selectFileFormat'\r\n              name='customSelect'\r\n              value={fileFormat}\r\n              onChange={e => {\r\n                setFileFormat(e.target.value)\r\n              }}\r\n            >\r\n              <option>xlsx</option>\r\n              <option>csv</option>\r\n              <option>txt</option>\r\n            </Input>\r\n          </div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color='primary' onClick={() => handleExport()}>\r\n            Export\r\n          </Button>\r\n          <Button color='flat-danger' onClick={() => toggleModal()}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default ExportSelected\r\n","// ** React Imports\r\nimport Proptypes from 'prop-types'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col } from 'reactstrap'\r\n\r\nconst ExtensionsHeader = props => {\r\n  return (\r\n    <Row className='mb-2'>\r\n      <Col sm='12' className='ms-50'>\r\n        <p className='font-medium-5 mt-1 extension-title' data-tour='extension-title'>\r\n          {props.title}\r\n        </p>\r\n        {props.link ? (\r\n          <a href={props.link} target='_blank' rel='noopener noreferrer'>\r\n            {props.subTitle}\r\n          </a>\r\n        ) : (\r\n          <p className='text-primary'>{props.subTitle}</p>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\nexport default ExtensionsHeader\r\n\r\n// ** PropTypes\r\nExtensionsHeader.propTypes = {\r\n  link: Proptypes.string,\r\n  title: Proptypes.string.isRequired,\r\n  subTitle: Proptypes.string.isRequired\r\n}\r\n"],"sourceRoot":""}