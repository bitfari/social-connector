{"version":3,"sources":["../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/logic/shouldSubscribeByName.ts","../../src/useSubscribe.ts","../../src/useController.ts","../../src/useFormState.ts","../../src/logic/getControllerValue.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/utils/isFunction.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isString.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","HookFormContext","useFormContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","signalName","convertToArrayPayload","currentName","startsWith","tearDown","_unsubscribe","unsubscribe","useSubscribe","props","_updateSubscription","disabled","subject","subscribe","next","callback","updateSubscriptionProps","skipEarlySubscription","useController","methods","control","shouldUnregister","setInputStateValue","_formValues","_defaultValues","updateFormState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","shouldSubscribeByName","shouldRenderFormState","_subjects","state","getProxyFormState","useFormState","values","registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","isNameInFieldArray","_names","array","_stateFlags","action","unregister","onChange","event","target","isCheckBoxInput","checked","getControllerValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","validateAllFieldCriteria","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","cloneObject","Set","isFunction","createSubject","_observers","observers","observer","subscription","tearDowns","add","push","teardown","createSubscription","subscriber","closed","createSubscriber","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","contains","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","options","option","map","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","criteriaMode","shouldUseNativeValidation","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","fieldName","join","foundError","pop","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","isBlurEvent","isSubmitted","reValidateMode","isString","RegExp","getValidateError","isMessage","validationData","isRegex","async","inputValue","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","submitCount","isSubmitting","isSubmitSuccessful","watch","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","isFieldWatched","watchAll","has","_updateValid","resolver","_executeSchema","executeBuildInValidation","shouldSkipRender","_updateFieldArray","method","shouldSetValues","shouldSetFields","fieldValues","argA","argB","unsetEmptyArray","updateFieldArrayDirty","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","setFieldArrayDirtyFields","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","fieldError","validateField","_removeUnmounted","live","getValues","_getWatch","isGlobal","_getFieldArray","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","handleChange","shouldSkipValidation","hasValidation","deps","skipValidation","isWatched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","all","shouldFocus","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","reset","formValues","keepStateOptions","hasUpdatedFormValues","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","useForm","_formControl"],"mappings":"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","file":"static/js/3.a9e5f584.chunk.js","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T>(name?: T, signalName?: string) =>\n  !name ||\n  !signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (currentName.startsWith(signalName) ||\n        signalName.startsWith(currentName)),\n  );\n","import * as React from 'react';\n\nimport { Subject, TearDown } from './utils/createSubject';\nimport { Noop } from './types';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n  skipEarlySubscription?: boolean;\n};\n\ntype Unsubscribe = { unsubscribe: TearDown };\n\ntype Payload<T> = {\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>;\n  props: Props<T>;\n};\n\nconst tearDown = (\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>,\n) => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps =\n  <T>({ _unsubscribe, props }: Payload<T>) =>\n  () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback,\n      });\n    }\n  };\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _unsubscribe = React.useRef<Unsubscribe>();\n  const _updateSubscription = React.useRef<Noop>(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props,\n  });\n\n  !props.skipEarlySubscription && _updateSubscription.current();\n\n  React.useEffect(() => {\n    _updateSubscription.current();\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: (data) =>\n      (!data.name || _name.current === data.name) &&\n      setInputStateValue(get(data.values, _name.current)),\n    skipEarlySubscription: true,\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport { FieldValues, UseFormStateProps, UseFormStateReturn } from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      shouldSubscribeByName(_name.current, formState.name) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n    skipEarlySubscription: true,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = Noop;\n\nexport type Subscription = {\n  add: (tearDown: TearDown) => void;\n  unsubscribe: () => void;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: Noop;\n};\n\nfunction createSubscription() {\n  let tearDowns: TearDown[] = [];\n\n  const add = (tearDown: TearDown) => {\n    tearDowns.push(tearDown);\n  };\n\n  const unsubscribe = () => {\n    for (const teardown of tearDowns) {\n      teardown();\n    }\n    tearDowns = [];\n  };\n\n  return {\n    add,\n    unsubscribe,\n  };\n}\n\nfunction createSubscriber<T>(\n  observer: Observer<T>,\n  subscription: Subscription,\n): Observer<T> {\n  let closed = false;\n  subscription.add(() => (closed = true));\n\n  const next = (value: T) => {\n    if (!closed) {\n      observer.next(value);\n    }\n  };\n\n  return {\n    next,\n  };\n}\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>) => {\n    const subscription = createSubscription();\n    const subscriber = createSubscriber(observer, subscription);\n    _observers.push(subscriber);\n    return subscription;\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    control: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(\n        (fieldName) => (\n          isGlobal && _names.watch.add(fieldName as InternalFieldName),\n          get(fieldValues, fieldName as InternalFieldName)\n        ),\n      );\n\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender &&\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues,\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  React.useEffect(\n    () => () =>\n      Object.values(control._subjects).forEach((subject) =>\n        subject.unsubscribe(),\n      ),\n    [control],\n  );\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}