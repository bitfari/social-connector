{"version":3,"sources":["webpack://src/@core/scss/base/pages/page-knowledge-base.scss","webpack://node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAeA,yBACE,qBAAA,CACA,gDAAA,CAMI,oEACE,eAAA,CASJ,+DACE,wBAtBG,CA0BL,4CACE,YAAA,CAKN,UACE,YAAA,CACA,kBAAA,CCiBE,wBDVE,iDACE,WACA,CAFF,uDAEE,aAAA,CAAA,CCQJ,wBDCA,oCACE,YAAA,CAAA,CCiDF,gDD1CA,oCACE,YAAA,CAAA","file":"42.3896a52e.chunk.css","sourcesContent":["// ===============================================================================================\r\n//  File Name: knowledge-base.scss\r\n//  Description: Knowledge Base Page Content SCSS\r\n//  ------\r\n//  \r\n//  \r\n//  \r\n// ================================================================================================\r\n\r\n@import '../bootstrap-extended/include'; // Bootstrap includes\r\n@import '../components/include'; // Components includes\r\n\r\n$svg-bg: #fcfcfc;\r\n\r\n// Knowledge-base jumbotron scss\r\n.knowledge-base-bg {\r\n  background-size: cover;\r\n  background-color: rgba($primary, 0.12) !important;\r\n\r\n  // knowledge base search\r\n  .kb-search-input {\r\n    .input-group {\r\n      // remove input group box shadow on inside focus\r\n      &:focus-within {\r\n        box-shadow: none;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n//\r\n.kb-search-content-info {\r\n  .kb-search-content {\r\n    .card-img-top {\r\n      background-color: $svg-bg;\r\n    }\r\n  }\r\n  .no-result {\r\n    &.no-items {\r\n      display: none;\r\n    }\r\n  }\r\n}\r\n// knowledge base title\r\n.kb-title {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n//search input width fixed for medium up screen\r\n@include media-breakpoint-up(md) {\r\n  .knowledge-base-bg {\r\n    .kb-search-input {\r\n      .input-group {\r\n        width: 576px;\r\n        margin: 0 auto;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// make jumbotron card body padding\r\n@include media-breakpoint-up(lg) {\r\n  .knowledge-base-bg {\r\n    .card-body {\r\n      padding: 8rem;\r\n    }\r\n  }\r\n}\r\n// make jumbotron card body padding\r\n@include media-breakpoint-only(md) {\r\n  .knowledge-base-bg {\r\n    .card-body {\r\n      padding: 6rem;\r\n    }\r\n  }\r\n}\r\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}