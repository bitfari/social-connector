{"version":3,"sources":["../../src/components/RefTrackerProvider.tsx","../../src/core/eventManager.ts","../../src/hooks/useRefTracker.ts","../../src/core/contextMenu.ts","../../src/hooks/useContextMenu.ts","../../src/components/menuController.ts","../../src/constants.ts","../../src/components/utils.ts","../../src/components/Menu.tsx","../../src/hooks/usePrevious.ts","../../src/components/Item.tsx","../../src/components/Submenu.tsx","views/extensions/context-menu/ContextSubmenu.js","views/extensions/context-menu/ContextMenuBasic.js","views/extensions/context-menu/ContextMenuLeftClick.js","views/extensions/context-menu/ContextMenuDoubleClick.js","views/extensions/context-menu/ContextMenuAnimation.js","views/extensions/context-menu/index.js","@core/components/avatar/index.js","@core/components/extensions-header/index.js"],"names":["Context","createContext","useRefTrackerContext","useContext","RefTrackerProvider","props","value","refTracker","createEventManager","eventList","on","Set","off","handler","emit","process","currentEv","console","event","eventManager","useRefTracker","useRef","contextMenu","id","position","useContextMenu","show","params","hideAll","createMenuController","menuList","forceCloseSubmenu","currentItems","focusedIndex","moveDown","closeSubmenu","focusSelectedItem","isFocused","isRoot","items","parentFocusedIndex","menuParentNode","parentNode","isAtRoot","init","moveUp","openSubmenu","submenuItems","Array","currentNode","animation","NOOP","isFn","v","isStr","cloneItems","children","Children","item","cloneElement","getPredicateValue","predicate","payload","reducer","Menu","theme","style","className","onHidden","onShown","rest","useReducer","x","y","visible","triggerEvent","propsFromTrigger","willLeave","state","setState","nodeRef","didMount","wasVisible","ref","useEffect","usePrevious","menuController","useState","e","pos","isTouchEvent","getMousePosition","setTimeout","hasExitAnimation","windowWidth","windowHeight","menuWidth","menuHeight","hide","window","cssClasses","cx","computeAnimationClasses","menuStyle","left","top","opacity","onAnimationEnd","role","Item","data","onClick","disabled","hidden","handlerParams","isDisabled","onKeyDown","node","isSubmenu","tabIndex","Submenu","arrow","label","menuRefTracker","bottom","setPosition","isHidden","innerWidth","innerHeight","rect","submenuStyle","submenuRefTracker","ToastContent","text","size","color","icon","ContextSubMenu","handleClick","toast","success","hideProgressBar","closeButton","tag","onContextMenu","outline","ContextMenuBasic","ContextMenuLeftClick","ContextMenuDoubleClick","onDoubleClick","ContextMenuAnimations","showFade","showFlip","showSlide","FadeMenu","FlipMenu","SlideMenu","Contexify","title","subTitle","link","sm","ContextMenuAnimation","Avatar","forwardRef","img","status","badgeUp","content","Tag","initials","imgWidth","badgeText","imgHeight","badgeColor","imgClassName","contentStyles","classnames","undefined","str","results","split","forEach","push","join","getInitials","pill","src","alt","height","width","defaultProps","ExtensionsHeader","href","target","rel"],"mappings":"qkBAGA,IAAMA,EAAUC,wBAAhB,I,SAKgBC,IACd,OAAOC,qBAAP,GAOK,IAAMC,EAAwD,SAAAC,GACnE,OACE,kBAACL,EAAD,UAAkBM,MAAOD,EAAME,YAC5BF,EAFL,WCNF,SAASG,IACP,IAAMC,EAAY,IAAlB,IAEA,MAAO,CACLC,GADK,c,MAMH,OAHAD,kBACIA,MADJA,KACIA,MADJA,GAEIA,QAAqB,IAAIE,IAAI,CAFjCF,KAGA,MAEFG,IARK,cAUH,OADAC,EAAUJ,gBAAH,GAA2CA,EAAS,OAA3DI,GACA,MAEFC,KAZK,cAaH,kBAAIC,8JAAmC,CACrC,IAAMC,EAAN,EAEKP,MAAD,IAAuC,IAAdO,GAC3BC,6IAUJ,OAJAR,UACEA,EAAA,IAAAS,GAAA,SAA8B,YAC5BL,QAEJ,OAKC,IAAMM,EAAeX,ICjC5B,SAAgBY,IACd,OAAOC,iBAA0C,IAA1CA,KAAP,Q,ICOIC,EAA2B,Y,IACxBC,OAAIL,UAAOb,UAAOmB,aACnBN,EAAJ,gBAA0BA,mBAE1BC,iBAA2C,CACzCD,MAAQA,eADiC,EAEzCb,MAFyC,EAGzCmB,cAPAF,EAA2B,WAW7BH,W,SCzBYM,EAAepB,GAC7B,MAAO,CACLqB,KADK,cAQHJ,EAAiB,CACfC,IAAK,MAAAI,OAAA,EAAAA,EAAA,YAActB,OAAd,EAAcA,EADJ,IAEfA,OAAO,MAAAsB,OAAA,EAAAA,EAAA,eAAiBtB,OAAjB,EAAiBA,EAFT,OAGfa,MAHe,EAIfM,SAAQ,MAAEG,OAAF,EAAEA,EAAQH,YAGtBI,QAfK,WAgBHN,MCXN,SAAgBO,IACd,IACA,EACA,EACA,EACA,EAJMC,EAAW,IAAjB,IAKIC,GAAJ,EAQA,aACEC,kBAWF,aACE,WAAIC,IAEFC,KACA,GAMJ,aACMD,IAAmBD,EAAvB,OACEC,IACSA,MAAqBD,EAAzB,SACLC,KAGF,GAAuBE,IAEvBC,IA6CF,aACE,GAAIC,MAAJ,EAA8B,OAMxBP,MANwB,GAE1BQ,EAF0B,SAG1BC,EAH0B,QAIZC,EAJY,eAKdC,EALc,aAQ5BC,wDAEAV,IACAU,IAEA,IACEC,KACAb,WAEF,IACEG,IACAG,MAKN,MAAO,CACLQ,KA5GF,YACEZ,IACAC,KACAU,MA0GAT,SAFK,EAGLW,OAtEF,YACMZ,OAAJ,IAA2BA,EACzBA,EAAeD,SAAfC,EACSA,IAAmBD,EAAvB,QACLC,IAGF,GAAuBE,IAEvBC,KA8DAU,YA3DF,WACE,GAAIT,KA1CGJ,MAAqBD,KAA5B,UA0CuC,CACrC,IAAMe,EAvCDC,WAAWhB,uBAAlB,UAwCQiB,EAAcjB,KAApB,KAsBA,OApBAF,QAA0B,CACxBQ,OADwB,EAExBL,aAFwB,EAGxBS,WAAYA,GAHY,EAIxBH,MAAOP,IAGTiB,qDACAP,IAEIK,SAAJ,GACEd,IACAD,KAEAD,KAGFY,KAEAP,KACA,EAEF,UAiCAD,gB,IC3GSe,EAAY,OAAZA,EAAY,OAAZA,EAIJ,QAGIC,EAAO,a,SCxBJC,EAAKC,GACnB,0BAAcA,EAGhB,SAAgBC,EAAMD,GACpB,wBAAcA,EAOhB,SAAgBE,EACdC,EACAnD,GAEA,OAAO,eAELoD,6BAFK,UAGL,SAAAC,GAAI,OAAIC,uBAAaD,EAAjB,MAyBR,SAAgBE,EACdC,EACAC,GAEA,OAAOV,KAAkBS,EAAlBT,GAAP,EC6BF,SAASW,EAAQ,EAAjB,GAIE,OAAOX,YACYU,EADZV,WAAP,GAKF,IAAaY,EAA4B,SAAC,G,MACxCzC,OACA0C,UACAC,UACAC,cACAX,a,IACAN,qBAAYA,EAAA,U,IACZkB,oBAAWA,EAAAjB,I,IACXkB,mBAAUA,EAAAlB,IACPmB,sF,EAEuBC,qBAAWR,EAAS,CAC5CS,EAD4C,EAE5CC,EAF4C,EAG5CC,SAH4C,EAI5CC,aAJ4C,GAK5CC,iBAL4C,KAM5CC,WAAW,IANNC,OAAOC,OAQRC,EAAU3D,iBAAhB,MACM4D,EAAW5D,kBAAjB,GACM6D,E,SClHuB5E,GAC7B,IAAM6E,EAAM9D,mBAMZ,OAJA+D,qBAAU,WACRD,cACC,CAFHC,IAIOD,EAAP,QD2GmBE,CAAYP,EAA/B,SACMvE,EAAaa,IACZkE,EAAkBC,oBAAS,kBAAM1D,OAAjCyD,GAkHP,c,IAAgBpE,UAAOb,UAAOmB,aAC5BN,oB,MACiBM,GD1MrB,SAAiCgE,GAC/B,IAAMC,EAAM,CACVjB,EADU,EAEVC,EAAG,GAeL,OAjCF,SAA6Be,GAC3B,mBAAOA,OAoBHE,KAAmBF,EAAnBE,gBAAuCF,wBAA3C,GACEC,IAAQD,oBAARC,QACAA,IAAQD,oBAARC,UAEAA,IAASD,EAATC,QACAA,IAASD,EAATC,WAGGA,EAAD,GAAUA,IAAd,KAAyBA,SAEpBA,EAAD,GAAUA,IAAd,KAAyBA,OAEzB,ECwL+BE,CAAiBzE,GAAtCsD,MAAGC,MAIXmB,YAAW,WACTb,EAAS,CACPL,SADO,EAEPG,WAFO,EAGPL,EAHO,EAIPC,EAJO,EAKPE,aALO,EAMPC,iBAAkBvE,MAPtBuF,GAYF,cAGE,IAAMJ,EAAN,GAGe,qBAANA,GACNA,eADD,IACmBA,WAFrB,gBAGEA,WDtMN,SAAiCtC,GAC/B,SACEA,KACCI,MAAqB,SAAUJ,GAAaA,EAF/C,OC0ME2C,IAEId,GAAS,SAAAD,GAAK,MAAK,CAAEJ,SAASI,WAAwBA,EAAMJ,YAD5DK,GAAS,SAAAD,GAAK,MAAK,CAAED,UAAWC,EAAMJ,aA/I5CU,qBAAU,WAIR,OAHAH,aACA9D,kBAEO,WACLA,uBAID,CATHiE,IAYAA,qBAAU,WACJH,WAAoBH,YAAxB,IACEA,UAAgBT,IAAYD,OAI7B,CAACU,EAAD,UANHM,IASAA,qBAAU,WACHN,EAAL,QAGEQ,OAAoBtC,WAAWzC,EAA/B+E,WAFA/E,YAID,CAACuE,EAAD,UANHM,IASAA,qBAAU,WACR,GAAIN,EAAJ,QAAmB,cACGgB,EADH,aAC6BC,EAD7B,gBAKbf,EALa,QAGFgB,EAHE,cAIDC,EAJC,eAMXzB,EAASM,EANE,EAMRL,EAAMK,EANE,EAQbN,IAAJ,IACEA,GAAKA,IAALA,GAGEC,IAAJ,IACEA,GAAKA,IAALA,GAGFM,EAAS,CACPP,EADO,EAEPC,SAMH,CAACK,EAzBJM,UA4BAA,qBAAU,WACR,cAEE,OADAI,mBACQA,EAAR,KACE,YACOF,EAAL,eAAmCY,IACnC,MACF,aACEA,IACA,MACF,cACEZ,WACA,MACF,gBACEA,aACA,MACF,iBACEA,gBACA,MACF,gBACEA,kBAkBN,OAbIR,EAAJ,UACEqB,oCACAA,yCACAA,mCACAA,oCACAA,kCALiB,GASfA,mCAIG,WACLA,uCACAA,4CACAA,sCACAA,uCACAA,wCAGEA,wCAKH,CAACrB,EAAD,QAnDHM,I,IAqHQV,EAA6DI,EAA7DJ,QAASC,EAAoDG,EAApDH,aAAcC,EAAsCE,EAAtCF,iBAAkBJ,EAAoBM,EAApBN,EAAGC,EAAiBK,EAAjBL,EAAGI,EAAcC,EAAdD,UACjDuB,EAAaC,YAAG,kBAAD,UAGb,2BAHa,QAvBrB,WACE,SAEI/C,EAAJ,GACS+C,cAAE,MACH,gCADG,GAELnD,OAFK,IAGH,gCAHG,EAGH,4CACFA,MAJK,EAAT,IAMS,UAAWA,GAAa,SAA5B,EACEmD,cAAE,MACH,gCAA2BnD,EADxB,OAELA,aAFK,IAGH,gCAA2BA,EAHxB,KAGH,4CACFA,WAJK,EAAT,IAQF,KAlBuB,KAED,MAOkC,EAiBxDoD,IAGIC,EAAY,EAAH,MAEbC,KAFa,EAGbC,IAHa,EAIbC,QAAS,IAGX,OACE,qBAAoBnG,WAAYA,GAC7BmE,GACC,yCACMJ,GACJH,UAAWiC,EACXO,eAjDR,WACM7B,aAAmBA,EAAvB,SACEC,EAAS,CAAEL,SAAF,EAAkBG,WAAW,KAgDlCX,MAAOqC,EACPpB,IAAKH,EACL4B,KAAK,SAEJrD,EAAWC,EAAU,CACpBoB,iBADoB,EAEpBD,oBEjPCkC,EAA4B,SAAC,G,MACxCrD,aACAW,cACAD,UACAS,iBACAmC,SACAlC,qB,IACAmC,mBAAUA,EAAA5D,I,IACV6D,oBAAWA,GAAA,E,IACXC,kBAASA,GAAA,EACN3C,+GAEG/D,EAAaL,IACbgH,EAAgB,CACpBJ,KADoB,EAEpBnC,aAFoB,EAGpBtE,MAAOuE,GAEHuC,EAAavD,EAAkBoD,EAArC,GAuBA,GAtBiBpD,EAAkBqD,EAAnC,GAsBc,OAAO,KAErB,IAAMb,EAAaC,YAAG,wBAAD,UACf,mCADe,EAArB,IAIA,OACE,yCACM/B,GACJH,UAAWiC,EACXlC,MAAOA,EACP6C,QA/BJ,YACGG,UACDC,EAAa3B,EAAH,kBAAyBuB,EAAnCI,IA8BEC,UAnBJ,YACE,UAAI5B,QACD0B,UACDH,OAiBA5B,IA5BJ,YACMkC,IAAJ,GACE9G,EAAA,MAAqB,CACnB8G,KADmB,EAEnBC,WAAW,KAyBbC,UAAW,EACXX,KAAK,W,gBACUO,IAEf,yBAAKhD,UAAS,kCAZlB,K,ICrFWqD,EAAkC,SAAC,G,UAC9CC,iBAAQA,EAAA,WACRjE,a,IACAwD,oBAAWA,GAAA,E,IACXC,kBAASA,GAAA,EACTS,UACAvD,cACAQ,iBACAC,qBACAV,UACGI,8GAEGqD,EAAiBzH,IACjBK,EAAaa,IACb4D,EAAU3D,iBAAhB,M,EACgCkE,mBAAuB,CACrDiB,KADqD,OAErDC,IAFqD,EAGrDmB,OAAQ,YAHHpG,OAAUqG,OAKXX,EAAgB,CACpBvC,aADoB,EAEpBtE,MAAOuE,GAEHuC,EAAavD,EAAkBoD,EAArC,GACMc,EAAWlE,EAAkBqD,EAAnC,GAwCA,GAtCA7B,qBAAU,WACR,GAAIJ,EAAJ,QAAqB,cACX+C,EADW,aACCC,EADD,cAEbC,EAAOjD,UAAb,wBACMd,EAAN,GAEI+D,QAAJ,GACE/D,cACAA,iBAEAA,eACAA,eAGE+D,SAAJ,GACE/D,WACAA,iBAEAA,mBAGF2D,QArBJzC,IAsCA,EAAc,OAAO,KAErB,IAAMgB,EAAaC,YAAG,wBAAD,UACf,mCADe,EAArB,IAIM6B,EAAe,EAAH,KAAlB,GAKA,OACE,qBAAoB3H,WAAYA,GAC9B,yCACM+D,GACJH,UAAWiC,EACXjB,IAzBN,YACMkC,IAAJ,GACEM,EAAA,MAAyB,CACvBN,KADuB,EAEvBC,WAFuB,EAGvBa,kBAAmB5H,KAqBnBgH,UAAW,EACXX,KAAK,W,mCAEUO,IAEf,yBAAKhD,UAAS,iCAAqB4C,QAnCzC,YACEvB,sBAkCI,EAEE,0BAAMrB,UAAS,kCAXnB,IAaE,yBAAKA,UAAS,2CAAiBgB,IAAKH,EAASd,MAAOgE,GACjD3E,EAAWC,EAAU,CACpBoB,iBADoB,EAGpBD,aAAcA,Q,OC9H1B,MAAMyD,EAAe,QAAC,KAAEC,GAAH,SACnB,cAAC,WAAD,UACE,qBAAKlE,UAAU,uBAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,IAAD,CAAQmE,KAAK,KAAKC,MAAM,UAAUC,KAAM,cAAC,IAAD,MACxC,oBAAIrE,UAAU,cAAd,2BAAwCkE,aA0CjCI,MApCQ,KACrB,MAAM,KAAE/G,GAASD,EAAe,CAC9BF,GAAI,eAGAmH,EAAcL,IAClBM,IAAMC,QAAQ,cAACR,EAAD,CAAcC,KAAMA,IAAU,CAAEG,MAAM,EAAOK,iBAAiB,EAAMC,aAAa,KAGjG,OACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAWC,IAAI,KAAf,wBAEF,eAAC,IAAD,WACE,cAAC,IAAD,CAAQR,MAAM,UAAUS,cAAetH,EAAMuH,SAAO,EAApD,qBAGA,eAAC,EAAD,CAAM1H,GAAG,aAAT,UACE,cAAC,EAAD,CAAMwF,QAAS,IAAM2B,EAAY,YAAjC,sBACA,cAAC,EAAD,CAAM3B,QAAS,IAAM2B,EAAY,YAAjC,sBACA,cAAC,EAAD,CAAM1B,UAAQ,EAAd,sBACA,eAAC,EAAD,CAASU,MAAM,UAAf,UACE,cAAC,EAAD,CAAMX,QAAS,IAAM2B,EAAY,WAAjC,qBACA,eAAC,EAAD,CAAShB,MAAM,UAAf,UACE,cAAC,EAAD,CAAMX,QAAS,IAAM2B,EAAY,QAAjC,kBACA,cAAC,EAAD,CAAM3B,QAAS,IAAM2B,EAAY,WAAjC,qBACA,cAAC,EAAD,CAAM3B,QAAS,IAAM2B,EAAY,QAAjC,kCCtCd,MAAMN,EAAe,QAAC,KAAEC,GAAH,SACnB,cAAC,WAAD,UACE,qBAAKlE,UAAU,uBAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,IAAD,CAAQmE,KAAK,KAAKC,MAAM,UAAUC,KAAM,cAAC,IAAD,MACxC,oBAAIrE,UAAU,cAAd,2BAAwCkE,aAiCjCa,MA3BU,KACvB,MAAM,KAAExH,GAASD,EAAe,CAC9BF,GAAI,YAGAmH,EAAcL,IAClBM,IAAMC,QAAQ,cAAC,EAAD,CAAcP,KAAMA,IAAU,CAAEG,MAAM,EAAOK,iBAAiB,EAAMC,aAAa,KAGjG,OACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAWC,IAAI,KAAf,kCAEF,eAAC,IAAD,WACE,cAAC,IAAD,CAAQR,MAAM,UAAUS,cAAetH,EAAMuH,SAAO,EAApD,+BAGA,eAAC,EAAD,CAAM1H,GAAG,UAAT,UACE,cAAC,EAAD,CAAMwF,QAAS,IAAM2B,EAAY,YAAjC,oBACA,cAAC,EAAD,CAAM3B,QAAS,IAAM2B,EAAY,YAAjC,8BC/BV,MAAMN,EAAe,QAAC,KAAEC,GAAH,SACnB,cAAC,WAAD,UACE,qBAAKlE,UAAU,uBAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,IAAD,CAAQmE,KAAK,KAAKC,MAAM,UAAUC,KAAM,cAAC,IAAD,MACxC,oBAAIrE,UAAU,cAAd,2BAAwCkE,aAiCjCc,MA3Bc,KAC3B,MAAM,KAAEzH,GAASD,EAAe,CAC9BF,GAAI,cAGAmH,EAAcL,IAClBM,IAAMC,QAAQ,cAAC,EAAD,CAAcP,KAAMA,IAAU,CAAEG,MAAM,EAAOK,iBAAiB,EAAMC,aAAa,KAGjG,OACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAWC,IAAI,KAAf,0BAEF,eAAC,IAAD,WACE,cAAC,IAAD,CAAQR,MAAM,UAAUxB,QAASrF,EAAMuH,SAAO,EAA9C,8BAGA,eAAC,EAAD,CAAM1H,GAAG,YAAT,UACE,cAAC,EAAD,CAAMwF,QAAS,IAAM2B,EAAY,YAAjC,sBACA,cAAC,EAAD,CAAM3B,QAAS,IAAM2B,EAAY,YAAjC,gCC/BV,MAAMN,EAAe,QAAC,KAAEC,GAAH,SACnB,cAAC,WAAD,UACE,qBAAKlE,UAAU,uBAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,IAAD,CAAQmE,KAAK,KAAKC,MAAM,UAAUC,KAAM,cAAC,IAAD,MACxC,oBAAIrE,UAAU,cAAd,2BAAwCkE,aAiCjCe,MA3BgB,KAC7B,MAAM,KAAE1H,GAASD,EAAe,CAC9BF,GAAI,gBAGAmH,EAAcL,IAClBM,IAAMC,QAAQ,cAAC,EAAD,CAAcP,KAAMA,IAAU,CAAEG,MAAM,EAAOK,iBAAiB,EAAMC,aAAa,KAGjG,OACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAWC,IAAI,KAAf,4BAEF,eAAC,IAAD,WACE,cAAC,IAAD,CAAQR,MAAM,UAAUc,cAAe3H,EAAMuH,SAAO,EAApD,gCAGA,eAAC,EAAD,CAAM1H,GAAG,cAAT,UACE,cAAC,EAAD,CAAMwF,QAAS,IAAM2B,EAAY,YAAjC,sBACA,cAAC,EAAD,CAAM3B,QAAS,IAAM2B,EAAY,YAAjC,gCC/BV,MAAMN,EAAe,QAAC,KAAEC,GAAH,SACnB,cAAC,WAAD,UACE,qBAAKlE,UAAU,uBAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,IAAD,CAAQmE,KAAK,KAAKC,MAAM,UAAUC,KAAM,cAAC,IAAD,MACxC,oBAAIrE,UAAU,cAAd,2BAAwCkE,aAyEjCiB,MAnEe,KAC5B,MAAQ5H,KAAM6H,GAAa9H,EAAe,CACxCF,GAAI,UAEEG,KAAM8H,GAAa/H,EAAe,CACxCF,GAAI,UAEEG,KAAM+H,GAAchI,EAAe,CACzCF,GAAI,QAGAmH,EAAcL,IAClBM,IAAMC,QAAQ,cAAC,EAAD,CAAcP,KAAMA,IAAU,CAAEG,MAAM,EAAOK,iBAAiB,EAAMC,aAAa,KAG3FY,EAAW,IAEb,eAAC,EAAD,CAAMnI,GAAG,OAAO2B,UAAWA,EAA3B,UACE,cAAC,EAAD,CAAM6D,QAAS,IAAM2B,EAAY,YAAjC,sBACA,cAAC,EAAD,CAAM3B,QAAS,IAAM2B,EAAY,YAAjC,yBAIAiB,EAAW,IAEb,eAAC,EAAD,CAAMpI,GAAG,OAAO2B,UAAWA,EAA3B,UACE,cAAC,EAAD,CAAM6D,QAAS,IAAM2B,EAAY,YAAjC,sBACA,cAAC,EAAD,CAAM3B,QAAS,IAAM2B,EAAY,YAAjC,yBAIAkB,EAAY,IAEd,eAAC,EAAD,CAAMrI,GAAG,MAAM2B,UAAWA,EAA1B,UACE,cAAC,EAAD,CAAM6D,QAAS,IAAM2B,EAAY,YAAjC,sBACA,cAAC,EAAD,CAAM3B,QAAS,IAAM2B,EAAY,YAAjC,yBAKN,OACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAWK,IAAI,KAAf,0BAEF,eAAC,IAAD,WACE,sBAAK5E,UAAU,sBAAf,UACE,cAAC,IAAD,CAAQoE,MAAM,UAAUS,cAAeO,EAAUN,SAAO,EAAxD,kBAIA,cAAC,IAAD,CAAQV,MAAM,UAAUS,cAAeQ,EAAUP,SAAO,EAAxD,kBAIA,cAAC,IAAD,CAAQV,MAAM,UAAUS,cAAeS,EAAWR,SAAO,EAAzD,sBAIF,cAACS,EAAD,IACA,cAACC,EAAD,IACA,cAACC,EAAD,W,gBCrCOC,UA7BG,IAEd,eAAC,WAAD,WACE,cAAC,IAAD,CACEC,MAAM,kBACNC,SAAS,kDACTC,KAAK,+CAEP,eAAC,KAAD,WACE,cAAC,IAAD,CAAKC,GAAG,KAAR,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAKA,GAAG,KAAR,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAKA,GAAG,KAAR,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAKA,GAAG,KAAR,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAKA,GAAG,KAAR,SACE,cAACC,EAAD,a,iCC1CV,0CAUA,MAAMC,EAASC,sBAAW,CAAC/J,EAAO8E,KAEhC,MAAM,IACJkF,EADI,KAEJ/B,EAFI,KAGJE,EAHI,MAIJD,EAJI,OAKJ+B,EALI,QAMJC,EANI,QAOJC,EACAzB,IAAK0B,EARD,SASJC,EATI,SAUJC,EAVI,UAWJxG,EAXI,UAYJyG,EAZI,UAaJC,EAbI,WAcJC,EAdI,aAeJC,EAfI,cAgBJC,KACG1G,GACDjE,EAYJ,OACE,eAACoK,EAAD,CACEtG,UAAW8G,IAAW,SAAU,CAC9B,CAAC9G,GAAYA,EACb,CAAC,MAAD,OAAOoE,IAAUA,EACjB,CAAC,UAAD,OAAWD,IAASA,IAEtBnD,IAAKA,KACDb,EAPN,WASW,IAAR+F,QAAyBa,IAARb,EAChB,uBACElG,UAAW8G,IAAW,iBAAkB,CACtC,oBAAqBV,IAEvBrG,MAAO8G,EAJT,UAMGN,EA1BWS,KAClB,MAAMC,EAAU,GAKhB,OAJkBD,EAAIE,MAAM,KAClBC,SAAQ9F,IAChB4F,EAAQG,KAAK/F,EAAE,OAEV4F,EAAQI,KAAK,KAoBFC,CAAYjB,GAAWA,EAElChC,GAAc,KACd+B,EACC,cAAC,IAAD,CAAOhC,MAAOuC,GAA0B,UAAW3G,UAAU,oBAAoBuH,MAAI,EAArF,SACGd,GAAwB,MAEzB,QAGN,qBACEzG,UAAW8G,IAAW,CACpB,CAACF,GAAeA,IAElBY,IAAKtB,EACLuB,IAAI,YACJC,OAAQhB,IAAcvC,EAAOuC,EAAY,GACzCiB,MAAOnB,IAAarC,EAAOqC,EAAW,KAGzCL,EACC,sBACEnG,UAAW8G,IAAW,CACpB,CAAC,iBAAD,OAAkBX,IAAWA,EAC7B,CAAC,iBAAD,OAAkBhC,IAASA,MAG7B,WAKK6B,MA+DfA,EAAO4B,aAAe,CACpBhD,IAAK,Q,iCC3JP,mBAwBeiD,IAlBU3L,GAErB,cAAC,KAAD,CAAK8D,UAAU,OAAf,SACE,eAAC,IAAD,CAAK8F,GAAG,KAAK9F,UAAU,QAAvB,UACE,mBAAGA,UAAU,qCAAqC,YAAU,kBAA5D,SACG9D,EAAMyJ,QAERzJ,EAAM2J,KACL,mBAAGiC,KAAM5L,EAAM2J,KAAMkC,OAAO,SAASC,IAAI,sBAAzC,SACG9L,EAAM0J,WAGT,mBAAG5F,UAAU,eAAb,SAA6B9D,EAAM0J","file":"static/js/36.d0a0a826.chunk.js","sourcesContent":["import React, { useContext, createContext } from 'react';\nimport { RefTracker } from '../hooks';\n\nconst Context = createContext({} as RefTracker);\n\n/**\n * Access parent ref tracker.\n */\nexport function useRefTrackerContext() {\n  return useContext(Context);\n}\n\nexport interface RefTrackerProviderProps {\n  refTracker: RefTracker;\n}\n\nexport const RefTrackerProvider: React.FC<RefTrackerProviderProps> = props => {\n  return (\n    <Context.Provider value={props.refTracker}>\n      {props.children}\n    </Context.Provider>\n  );\n};\n","import { EVENT } from '../constants';\n\nexport type EventType = string | number | symbol;\nexport type Handler<T = any> = (args: T) => void;\n\nexport interface EventManager<E = EventType> {\n  on<T = any>(event: E, handler: Handler<T>): EventManager<E>;\n  off<T = any>(event: E, handler?: Handler<T>): EventManager<E>;\n  emit<T = any>(event: E, args?: T): EventManager<E>;\n}\n\nfunction createEventManager<E = EventType>(): EventManager<E> {\n  const eventList = new Map<E, Set<Handler>>();\n\n  return {\n    on<T = any>(event: E, handler: Handler<T>) {\n      //eslint-disable-next-line @typescript-eslint/no-unused-expressions\n      eventList.has(event)\n        ? eventList.get(event)?.add(handler)\n        : eventList.set(event, new Set([handler]));\n      return this;\n    },\n    off<T = any>(event: E, handler?: Handler<T>) {\n      handler ? eventList.get(event)!.delete(handler) : eventList.delete(event);\n      return this;\n    },\n    emit<T = any>(event: E, args: T) {\n      if (process.env.NODE !== 'production') {\n        const currentEv = (event as unknown) as number;\n\n        if (!eventList.has(event) && currentEv !== EVENT.HIDE_ALL) {\n          console.error(\n            `It seems that the menu you are trying to display is not renderer or you have a menu id mismatch.`,\n            `You used the menu id: ${event}`\n          );\n        }\n      }\n      eventList.has(event) &&\n        eventList.get(event)!.forEach((handler: Handler<T>) => {\n          handler(args);\n        });\n      return this;\n    },\n  };\n}\n\nexport const eventManager = createEventManager();\n","import { useRef } from 'react';\n\nexport interface RefTrackerValue {\n  node: HTMLElement;\n  isSubmenu: boolean;\n  submenuRefTracker?: RefTracker;\n}\n\nexport type RefTracker = ReturnType<typeof useRefTracker>;\n\n/**\n * Used to store children refs\n */\nexport function useRefTracker() {\n  return useRef<Map<HTMLElement, RefTrackerValue>>(new Map()).current;\n}\n","import { eventManager } from './eventManager';\nimport { MenuId, TriggerEvent } from '../types';\nimport { SyntheticEvent } from 'react';\n\nimport { EVENT } from '../constants';\n\nexport interface ShowContextMenuParams {\n  id: MenuId;\n  event: TriggerEvent;\n  props?: any;\n  position?: {\n    x: number;\n    y: number;\n  } | null;\n}\n\nexport interface ContextMenu {\n  show: (params: ShowContextMenuParams) => void;\n  hideAll: () => void;\n}\n\nconst contextMenu: ContextMenu = {\n  show({ id, event, props, position }) {\n    if (event.preventDefault) event.preventDefault();\n\n    eventManager.emit(EVENT.HIDE_ALL).emit(id, {\n      event: (event as SyntheticEvent).nativeEvent || event,\n      props,\n      position,\n    });\n  },\n  hideAll() {\n    eventManager.emit(EVENT.HIDE_ALL);\n  },\n};\n\nexport { contextMenu };\n","import { contextMenu } from '../core';\nimport { ContextMenuParams, TriggerEvent } from '../types';\n\nexport type UseContextMenuProps = Partial<\n  Pick<ContextMenuParams, 'id' | 'props'>\n>;\n\nexport function useContextMenu(props?: UseContextMenuProps) {\n  return {\n    show(event: TriggerEvent, params?: Omit<ContextMenuParams, 'event'>) {\n      if (process.env.NODE_ENV === 'development') {\n        if (!props?.id && !params?.id)\n          console.error(\n            \"You need to provide an id when initializing the hook `useContextMenu({ id: 'your id' })` or when you display the menu `show(e, { id: 'your id' })`. The later is used to override the one defined during initialization.\"\n          );\n      }\n      contextMenu.show({\n        id: (params?.id || props?.id) as string,\n        props: params?.props || props?.props,\n        event: event,\n        position: params?.position,\n      });\n    },\n    hideAll() {\n      contextMenu.hideAll();\n    },\n  };\n}\n","import { RefTrackerValue } from '../hooks';\nimport { STYLE } from '../constants';\n\ninterface Menu<T = RefTrackerValue> {\n  items: T[];\n  isRoot: boolean;\n  focusedIndex: number;\n  parentNode: HTMLElement;\n}\n\n/**\n * Used to control keyboard navigation\n */\nexport function createMenuController() {\n  const menuList = new Map<HTMLElement, Menu>();\n  let focusedIndex: number;\n  let parentNode: HTMLElement;\n  let isAtRoot: boolean;\n  let currentItems: RefTrackerValue[];\n  let forceCloseSubmenu = false;\n\n  function init(rootMenu: RefTrackerValue[]) {\n    currentItems = rootMenu;\n    focusedIndex = -1;\n    isAtRoot = true;\n  }\n\n  function focusSelectedItem() {\n    currentItems[focusedIndex].node.focus();\n  }\n\n  function isSubmenuFocused() {\n    return focusedIndex >= 0 && currentItems[focusedIndex].isSubmenu;\n  }\n\n  function getSubmenuItems() {\n    return Array.from(currentItems[focusedIndex].submenuRefTracker!.values());\n  }\n\n  function isFocused() {\n    if (focusedIndex === -1) {\n      // focus first item\n      moveDown();\n      return false;\n    }\n\n    return true;\n  }\n\n  function moveDown() {\n    if (focusedIndex + 1 < currentItems.length) {\n      focusedIndex++;\n    } else if (focusedIndex + 1 === currentItems.length) {\n      focusedIndex = 0;\n    }\n\n    if (forceCloseSubmenu) closeSubmenu();\n\n    focusSelectedItem();\n  }\n\n  function moveUp() {\n    if (focusedIndex === -1 || focusedIndex === 0) {\n      focusedIndex = currentItems.length - 1;\n    } else if (focusedIndex - 1 < currentItems.length) {\n      focusedIndex--;\n    }\n\n    if (forceCloseSubmenu) closeSubmenu();\n\n    focusSelectedItem();\n  }\n\n  function openSubmenu() {\n    if (isFocused() && isSubmenuFocused()) {\n      const submenuItems = getSubmenuItems();\n      const currentNode = currentItems[focusedIndex].node;\n\n      menuList.set(currentNode, {\n        isRoot: isAtRoot,\n        focusedIndex,\n        parentNode: parentNode || currentNode,\n        items: currentItems,\n      });\n\n      currentNode.classList.add(STYLE.submenuOpen);\n      parentNode = currentNode;\n\n      if (submenuItems.length > 0) {\n        focusedIndex = 0;\n        currentItems = submenuItems;\n      } else {\n        forceCloseSubmenu = true;\n      }\n\n      isAtRoot = false;\n\n      focusSelectedItem();\n      return true;\n    }\n    return false;\n  }\n\n  function closeSubmenu() {\n    if (isFocused() && !isAtRoot) {\n      const {\n        isRoot,\n        items,\n        focusedIndex: parentFocusedIndex,\n        parentNode: menuParentNode,\n      } = menuList.get(parentNode)!;\n\n      parentNode.classList.remove(STYLE.submenuOpen);\n\n      currentItems = items;\n      parentNode = menuParentNode;\n\n      if (isRoot) {\n        isAtRoot = true;\n        menuList.clear();\n      }\n      if (!forceCloseSubmenu) {\n        focusedIndex = parentFocusedIndex;\n        focusSelectedItem();\n      }\n    }\n  }\n\n  return {\n    init,\n    moveDown,\n    moveUp,\n    openSubmenu,\n    closeSubmenu,\n  };\n}\n","/*\n * css classes mapping\n * */\nexport const enum STYLE {\n  menu = 'react-contexify',\n  submenu = 'react-contexify react-contexify__submenu',\n  submenuArrow = 'react-contexify__submenu-arrow',\n  submenuOpen = 'react-contexify__submenu--is-open',\n  separator = 'react-contexify__separator',\n  item = 'react-contexify__item',\n  itemDisabled = 'react-contexify__item--disabled',\n  itemContent = 'react-contexify__item__content',\n  theme = 'react-contexify__theme--',\n  animationWillEnter = 'react-contexify__will-enter--',\n  animationWillLeave = 'react-contexify__will-leave--',\n}\n\nexport const enum EVENT {\n  HIDE_ALL,\n}\n\nexport const theme = {\n  light: 'light',\n  dark: 'dark',\n};\n\nexport const animation = {\n  fade: 'fade',\n  flip: 'flip',\n  scale: 'scale',\n  slide: 'slide',\n};\n\nexport const NOOP = () => {};\n","import { Children, cloneElement, ReactNode, ReactElement } from 'react';\n\nimport {\n  BooleanPredicate,\n  PredicateParams,\n  MenuAnimation,\n  TriggerEvent,\n} from '../types';\n\nexport function isFn(v: any): v is Function {\n  return typeof v === 'function';\n}\n\nexport function isStr(v: any): v is String {\n  return typeof v === 'string';\n}\n\nexport function isTouchEvent(e: TriggerEvent): e is TouchEvent {\n  return e.type === 'touchend';\n}\n\nexport function cloneItems(\n  children: ReactNode,\n  props: { triggerEvent: TriggerEvent; propsFromTrigger?: object }\n) {\n  return Children.map(\n    // remove null item\n    Children.toArray(children).filter(Boolean),\n    item => cloneElement(item as ReactElement<any>, props)\n  );\n}\n\nexport function getMousePosition(e: TriggerEvent) {\n  const pos = {\n    x: 0,\n    y: 0,\n  };\n\n  if (isTouchEvent(e) && e.changedTouches && e.changedTouches.length > 0) {\n    pos.x = e.changedTouches[0].clientX;\n    pos.y = e.changedTouches[0].clientY;\n  } else {\n    pos.x = (e as MouseEvent).clientX;\n    pos.y = (e as MouseEvent).clientY;\n  }\n\n  if (!pos.x || pos.x < 0) pos.x = 0;\n\n  if (!pos.y || pos.y < 0) pos.y = 0;\n\n  return pos;\n}\n\nexport function getPredicateValue(\n  predicate: BooleanPredicate,\n  payload: PredicateParams\n) {\n  return isFn(predicate) ? predicate(payload) : predicate;\n}\n\nexport function hasExitAnimation(animation: MenuAnimation) {\n  return !!(\n    animation &&\n    (isStr(animation) || ('exit' in animation && animation.exit))\n  );\n}\n","/* global: window */\nimport React, {\n  ReactNode,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport cx from 'clsx';\n\nimport { RefTrackerProvider } from './RefTrackerProvider';\n\nimport { eventManager } from '../core/eventManager';\nimport {\n  TriggerEvent,\n  MenuId,\n  ContextMenuParams,\n  MenuAnimation,\n} from '../types';\nimport { usePrevious, useRefTracker } from '../hooks';\nimport { createMenuController } from './menuController';\nimport { NOOP, STYLE, EVENT } from '../constants';\nimport {\n  cloneItems,\n  getMousePosition,\n  hasExitAnimation,\n  isFn,\n  isStr,\n} from './utils';\n\nexport interface MenuProps\n  extends Omit<React.HTMLAttributes<HTMLElement>, 'id'> {\n  /**\n   * Unique id to identify the menu. Use to Trigger the corresponding menu\n   */\n  id: MenuId;\n\n  /**\n   * Any valid node that can be rendered\n   */\n  children: ReactNode;\n\n  /**\n   * Theme is appended to `react-contexify__theme--${given theme}`.\n   *\n   * Built-in theme are `light` and `dark`\n   */\n  theme?: string;\n\n  /**\n   * Animation is appended to\n   * - `.react-contexify__will-enter--${given animation}`\n   * - `.react-contexify__will-leave--${given animation}`\n   *\n   * - To disable all animations you can pass `false`\n   * - To disable only the enter or the exit animation you can provide an object `{enter: false, exit: 'exitAnimation'}`\n   *\n   * - default is set to `scale`\n   *\n   * To use the built-in animation a helper in available\n   * `import { animation } from 'react-contexify`\n   *\n   * animation.fade\n   */\n  animation?: MenuAnimation;\n\n  /**\n   * Invoked after the menu is visible.\n   */\n  onShown?: () => void;\n\n  /**\n   * Invoked after the menu has been hidden.\n   */\n  onHidden?: () => void;\n}\n\ninterface MenuState {\n  x: number;\n  y: number;\n  visible: boolean;\n  triggerEvent: TriggerEvent;\n  propsFromTrigger: any;\n  willLeave: boolean;\n}\n\nfunction reducer(\n  state: MenuState,\n  payload: Partial<MenuState> | ((state: MenuState) => Partial<MenuState>)\n) {\n  return isFn(payload)\n    ? { ...state, ...payload(state) }\n    : { ...state, ...payload };\n}\n\nexport const Menu: React.FC<MenuProps> = ({\n  id,\n  theme,\n  style,\n  className,\n  children,\n  animation = 'scale',\n  onHidden = NOOP,\n  onShown = NOOP,\n  ...rest\n}) => {\n  const [state, setState] = useReducer(reducer, {\n    x: 0,\n    y: 0,\n    visible: false,\n    triggerEvent: {} as TriggerEvent,\n    propsFromTrigger: null,\n    willLeave: false,\n  });\n  const nodeRef = useRef<HTMLDivElement>(null);\n  const didMount = useRef(false);\n  const wasVisible = usePrevious(state.visible);\n  const refTracker = useRefTracker();\n  const [menuController] = useState(() => createMenuController());\n\n  // subscribe event manager\n  useEffect(() => {\n    didMount.current = true;\n    eventManager.on(id, show).on(EVENT.HIDE_ALL, hide);\n\n    return () => {\n      eventManager.off(id, show).off(EVENT.HIDE_ALL, hide);\n    };\n    // hide rely on setState(dispatch), which is guaranted to be the same across render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  // handle show/ hide callback\n  useEffect(() => {\n    if (didMount.current && state.visible !== wasVisible) {\n      state.visible ? onShown() : onHidden();\n    }\n    // wasWisible is a ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.visible, onHidden, onShown]);\n\n  // collect menu items for keyboard navigation\n  useEffect(() => {\n    if (!state.visible) {\n      refTracker.clear();\n    } else {\n      menuController.init(Array.from(refTracker.values()));\n    }\n  }, [state.visible, menuController, refTracker]);\n\n  // compute menu position\n  useEffect(() => {\n    if (state.visible) {\n      const { innerWidth: windowWidth, innerHeight: windowHeight } = window;\n      const {\n        offsetWidth: menuWidth,\n        offsetHeight: menuHeight,\n      } = nodeRef.current!;\n      let { x, y } = state;\n\n      if (x + menuWidth > windowWidth) {\n        x -= x + menuWidth - windowWidth;\n      }\n\n      if (y + menuHeight > windowHeight) {\n        y -= y + menuHeight - windowHeight;\n      }\n\n      setState({\n        x,\n        y,\n      });\n    }\n\n    // state.visible and state{x,y} are updated together\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.visible]);\n\n  // subscribe dom events\n  useEffect(() => {\n    function handleKeyboard(e: KeyboardEvent) {\n      e.preventDefault();\n      switch (e.key) {\n        case 'Enter':\n          if (!menuController.openSubmenu()) hide();\n          break;\n        case 'Escape':\n          hide();\n          break;\n        case 'ArrowUp':\n          menuController.moveUp();\n          break;\n        case 'ArrowDown':\n          menuController.moveDown();\n          break;\n        case 'ArrowRight':\n          menuController.openSubmenu();\n          break;\n        case 'ArrowLeft':\n          menuController.closeSubmenu();\n          break;\n      }\n    }\n\n    if (state.visible) {\n      window.addEventListener('resize', hide);\n      window.addEventListener('contextmenu', hide);\n      window.addEventListener('click', hide);\n      window.addEventListener('scroll', hide);\n      window.addEventListener('keydown', handleKeyboard);\n\n      // This let us debug the menu in the console in dev mode\n      if (process.env.NODE_ENV !== 'development') {\n        window.addEventListener('blur', hide);\n      }\n    }\n\n    return () => {\n      window.removeEventListener('resize', hide);\n      window.removeEventListener('contextmenu', hide);\n      window.removeEventListener('click', hide);\n      window.removeEventListener('scroll', hide);\n      window.removeEventListener('keydown', handleKeyboard);\n\n      if (process.env.NODE_ENV !== 'development') {\n        window.removeEventListener('blur', hide);\n      }\n    };\n    // state.visible will let us get the right reference to `hide`\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.visible, menuController]);\n\n  function show({ event, props, position }: ContextMenuParams) {\n    event.stopPropagation();\n    const { x, y } = position || getMousePosition(event);\n\n    // prevent react from batching the state update\n    // if the menu is already visible we have to recompute bounding rect based on position\n    setTimeout(() => {\n      setState({\n        visible: true,\n        willLeave: false,\n        x,\n        y,\n        triggerEvent: event,\n        propsFromTrigger: props,\n      });\n    }, 0);\n  }\n\n  function hide(event?: Event) {\n    // Safari trigger a click event when you ctrl + trackpad\n    // Firefox:  trigger a click event when right click occur\n    const e = event as KeyboardEvent & MouseEvent;\n\n    if (\n      typeof e !== 'undefined' &&\n      (e.button === 2 || e.ctrlKey === true) &&\n      e.type !== 'contextmenu'\n    ) {\n      return;\n    }\n\n    hasExitAnimation(animation)\n      ? setState(state => ({ willLeave: state.visible }))\n      : setState(state => ({ visible: state.visible ? false : state.visible }));\n  }\n\n  function handleAnimationEnd() {\n    if (state.willLeave && state.visible) {\n      setState({ visible: false, willLeave: false });\n    }\n  }\n\n  function computeAnimationClasses() {\n    if (!animation) return null;\n\n    if (isStr(animation)) {\n      return cx({\n        [`${STYLE.animationWillEnter}${animation}`]:\n          animation && visible && !willLeave,\n        [`${STYLE.animationWillLeave}${animation} ${STYLE.animationWillLeave}'disabled'`]:\n          animation && visible && willLeave,\n      });\n    } else if ('enter' in animation && 'exit' in animation) {\n      return cx({\n        [`${STYLE.animationWillEnter}${animation.enter}`]:\n          animation.enter && visible && !willLeave,\n        [`${STYLE.animationWillLeave}${animation.exit} ${STYLE.animationWillLeave}'disabled'`]:\n          animation.exit && visible && willLeave,\n      });\n    }\n\n    return null;\n  }\n\n  const { visible, triggerEvent, propsFromTrigger, x, y, willLeave } = state;\n  const cssClasses = cx(\n    STYLE.menu,\n    className,\n    { [`${STYLE.theme}${theme}`]: theme },\n    computeAnimationClasses()\n  );\n\n  const menuStyle = {\n    ...style,\n    left: x,\n    top: y,\n    opacity: 1,\n  };\n\n  return (\n    <RefTrackerProvider refTracker={refTracker}>\n      {visible && (\n        <div\n          {...rest}\n          className={cssClasses}\n          onAnimationEnd={handleAnimationEnd}\n          style={menuStyle}\n          ref={nodeRef}\n          role=\"menu\"\n        >\n          {cloneItems(children, {\n            propsFromTrigger,\n            triggerEvent,\n          })}\n        </div>\n      )}\n    </RefTrackerProvider>\n  );\n};\n","import { useEffect, useRef } from 'react';\n\nexport function usePrevious<T>(value: T) {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n","import React, { ReactNode } from 'react';\nimport cx from 'clsx';\n\nimport {\n  ItemParams,\n  InternalProps,\n  BooleanPredicate,\n  HandlerParamsEvent,\n} from '../types';\nimport { useRefTrackerContext } from './RefTrackerProvider';\nimport { NOOP, STYLE } from '../constants';\nimport { getPredicateValue } from './utils';\n\nexport interface ItemProps\n  extends InternalProps,\n    Omit<React.HTMLAttributes<HTMLElement>, 'hidden' | 'disabled' | 'onClick'> {\n  /**\n   * Any valid node that can be rendered\n   */\n  children: ReactNode;\n\n  /**\n   * Passed to the `Item` onClick callback. Accessible via `data`\n   */\n  data?: any;\n\n  /**\n   * Disable `Item`. If a function is used, a boolean must be returned\n   *\n   * @param props The props passed when you called `show(e, {props: yourProps})`\n   * @param data The data defined on the `Item`\n   * @param triggerEvent The event that triggered the context menu\n   *\n   *\n   * ```\n   * function isItemDisabled({ triggerEvent, props, data }: PredicateParams<type of props, type of data>): boolean\n   * <Item disabled={isItemDisabled} data={data}>content</Item>\n   * ```\n   */\n  disabled?: BooleanPredicate;\n\n  /**\n   * Hide the `Item`. If a function is used, a boolean must be returned\n   *\n   * @param props The props passed when you called `show(e, {props: yourProps})`\n   * @param data The data defined on the `Item`\n   * @param triggerEvent The event that triggered the context menu\n   *\n   *\n   * ```\n   * function isItemHidden({ triggerEvent, props, data }: PredicateParams<type of props, type of data>): boolean\n   * <Item hidden={isItemHidden} data={data}>content</Item>\n   * ```\n   */\n  hidden?: BooleanPredicate;\n\n  /**\n   * Callback when the `Item` is clicked.\n   *\n   * @param event The event that occured on the Item node\n   * @param props The props passed when you called `show(e, {props: yourProps})`\n   * @param data The data defined on the `Item`\n   * @param triggerEvent The event that triggered the context menu\n   *\n   * ```\n   * function handleItemClick({ triggerEvent, event, props, data }: ItemParams<type of props, type of data>){\n   *    // retrieve the id of the Item or any other dom attribute\n   *    const id = e.currentTarget.id;\n   *\n   *    // access the props and the data\n   *    console.log(props, data);\n   *\n   *    // access the coordinate of the mouse when the menu has been displayed\n   *    const {  clientX, clientY } = triggerEvent;\n   *\n   * }\n   *\n   * <Item id=\"item-id\" onClick={handleItemClick} data={{key: 'value'}}>Something</Item>\n   * ```\n   */\n  onClick?: (args: ItemParams) => void;\n}\n\nexport const Item: React.FC<ItemProps> = ({\n  children,\n  className,\n  style,\n  triggerEvent,\n  data,\n  propsFromTrigger,\n  onClick = NOOP,\n  disabled = false,\n  hidden = false,\n  ...rest\n}) => {\n  const refTracker = useRefTrackerContext();\n  const handlerParams = {\n    data,\n    triggerEvent: triggerEvent as HandlerParamsEvent,\n    props: propsFromTrigger,\n  };\n  const isDisabled = getPredicateValue(disabled, handlerParams);\n  const isHidden = getPredicateValue(hidden, handlerParams);\n\n  function handleClick(e: React.MouseEvent<HTMLElement>) {\n    (handlerParams as ItemParams).event = e;\n    isDisabled ? e.stopPropagation() : onClick(handlerParams as ItemParams);\n  }\n\n  function trackRef(node: HTMLElement | null) {\n    if (node && !isDisabled)\n      refTracker.set(node, {\n        node,\n        isSubmenu: false,\n      });\n  }\n\n  function handleKeyDown(e: React.KeyboardEvent<HTMLElement>) {\n    if (e.key === 'Enter') {\n      (handlerParams as ItemParams).event = e;\n      onClick(handlerParams as ItemParams);\n    }\n  }\n\n  if (isHidden) return null;\n\n  const cssClasses = cx(STYLE.item, className, {\n    [`${STYLE.itemDisabled}`]: isDisabled,\n  });\n\n  return (\n    <div\n      {...rest}\n      className={cssClasses}\n      style={style}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      ref={trackRef}\n      tabIndex={-1}\n      role=\"menuitem\"\n      aria-disabled={isDisabled}\n    >\n      <div className={STYLE.itemContent}>{children}</div>\n    </div>\n  );\n};\n","import React, { ReactNode, useEffect, useRef, useState } from 'react';\nimport cx from 'clsx';\n\nimport { InternalProps, BooleanPredicate, HandlerParamsEvent } from '../types';\nimport { RefTrackerProvider, useRefTrackerContext } from './RefTrackerProvider';\nimport { useRefTracker } from '../hooks';\nimport { STYLE } from '../constants';\nimport { cloneItems, getPredicateValue } from './utils';\n\nexport interface SubMenuProps\n  extends InternalProps,\n    Omit<React.HTMLAttributes<HTMLElement>, 'hidden'> {\n  /**\n   * Any valid node that can be rendered\n   */\n  label: ReactNode;\n\n  /**\n   * Any valid node that can be rendered\n   */\n  children: ReactNode;\n\n  /**\n   * Render a custom arrow\n   */\n  arrow?: ReactNode;\n\n  /**\n   * Disable the `Submenu`. If a function is used, a boolean must be returned\n   */\n  disabled?: BooleanPredicate;\n\n  /**\n   * Hide the `Submenu` and his children. If a function is used, a boolean must be returned\n   */\n  hidden?: BooleanPredicate;\n}\n\ninterface SubMenuState {\n  left?: string | number;\n  right?: string | number;\n  top?: string | number;\n  bottom?: string | number;\n}\n\nexport const Submenu: React.FC<SubMenuProps> = ({\n  arrow = '▶',\n  children,\n  disabled = false,\n  hidden = false,\n  label,\n  className,\n  triggerEvent,\n  propsFromTrigger,\n  style,\n  ...rest\n}) => {\n  const menuRefTracker = useRefTrackerContext();\n  const refTracker = useRefTracker();\n  const nodeRef = useRef<HTMLDivElement>(null);\n  const [position, setPosition] = useState<SubMenuState>({\n    left: '100%',\n    top: 0,\n    bottom: 'initial',\n  });\n  const handlerParams = {\n    triggerEvent: triggerEvent as HandlerParamsEvent,\n    props: propsFromTrigger,\n  };\n  const isDisabled = getPredicateValue(disabled, handlerParams);\n  const isHidden = getPredicateValue(hidden, handlerParams);\n\n  useEffect(() => {\n    if (nodeRef.current) {\n      const { innerWidth, innerHeight } = window;\n      const rect = nodeRef.current.getBoundingClientRect();\n      const style: SubMenuState = {};\n\n      if (rect.right < innerWidth) {\n        style.left = '100%';\n        style.right = undefined;\n      } else {\n        style.right = '100%';\n        style.left = undefined;\n      }\n\n      if (rect.bottom > innerHeight) {\n        style.bottom = 0;\n        style.top = 'initial';\n      } else {\n        style.bottom = 'initial';\n      }\n\n      setPosition(style);\n    }\n  }, []);\n\n  function handleClick(e: React.SyntheticEvent) {\n    e.stopPropagation();\n  }\n\n  function trackRef(node: HTMLElement | null) {\n    if (node && !isDisabled)\n      menuRefTracker.set(node, {\n        node,\n        isSubmenu: true,\n        submenuRefTracker: refTracker,\n      });\n  }\n\n  if (isHidden) return null;\n\n  const cssClasses = cx(STYLE.item, className, {\n    [`${STYLE.itemDisabled}`]: isDisabled,\n  });\n\n  const submenuStyle = {\n    ...style,\n    ...position,\n  };\n\n  return (\n    <RefTrackerProvider refTracker={refTracker}>\n      <div\n        {...rest}\n        className={cssClasses}\n        ref={trackRef}\n        tabIndex={-1}\n        role=\"menuitem\"\n        aria-haspopup\n        aria-disabled={isDisabled}\n      >\n        <div className={STYLE.itemContent} onClick={handleClick}>\n          {label}\n          <span className={STYLE.submenuArrow}>{arrow}</span>\n        </div>\n        <div className={STYLE.submenu} ref={nodeRef} style={submenuStyle}>\n          {cloneItems(children, {\n            propsFromTrigger,\n            // injected by the parent\n            triggerEvent: triggerEvent!,\n          })}\n        </div>\n      </div>\n    </RefTrackerProvider>\n  );\n};\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Third Party Components\r\nimport { Check } from 'react-feather'\r\nimport { toast } from 'react-toastify'\r\nimport { Menu, Item, Submenu, useContextMenu } from 'react-contexify'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardBody, CardTitle, Button } from 'reactstrap'\r\n\r\nconst ToastContent = ({ text }) => (\r\n  <Fragment>\r\n    <div className='toastify-header pb-0'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color='success' icon={<Check />} />\r\n        <h6 className='toast-title'>{`Clicked ${text}`}</h6>\r\n      </div>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst ContextSubMenu = () => {\r\n  const { show } = useContextMenu({\r\n    id: 'submenu_id'\r\n  })\r\n\r\n  const handleClick = text => {\r\n    toast.success(<ToastContent text={text} />, { icon: false, hideProgressBar: true, closeButton: false })\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Sub Menu</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Button color='primary' onContextMenu={show} outline>\r\n          Submenu\r\n        </Button>\r\n        <Menu id='submenu_id'>\r\n          <Item onClick={() => handleClick('Option 1')}>Option 1</Item>\r\n          <Item onClick={() => handleClick('Option 2')}>Option 2</Item>\r\n          <Item disabled>Option 3</Item>\r\n          <Submenu label='Submenu'>\r\n            <Item onClick={() => handleClick('Foo Bar')}>Foo Bar</Item>\r\n            <Submenu label='Submenu'>\r\n              <Item onClick={() => handleClick('Echo')}>Echo</Item>\r\n              <Item onClick={() => handleClick('Foxtrot')}>Foxtrot</Item>\r\n              <Item onClick={() => handleClick('Golf')}>Golf</Item>\r\n            </Submenu>\r\n          </Submenu>\r\n        </Menu>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ContextSubMenu\r\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Third Party Components\r\nimport { Check } from 'react-feather'\r\nimport { toast } from 'react-toastify'\r\nimport { Menu, Item, useContextMenu } from 'react-contexify'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardBody, CardTitle, Button } from 'reactstrap'\r\n\r\nconst ToastContent = ({ text }) => (\r\n  <Fragment>\r\n    <div className='toastify-header pb-0'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color='success' icon={<Check />} />\r\n        <h6 className='toast-title'>{`Clicked ${text}`}</h6>\r\n      </div>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst ContextMenuBasic = () => {\r\n  const { show } = useContextMenu({\r\n    id: 'menu_id'\r\n  })\r\n\r\n  const handleClick = text => {\r\n    toast.success(<ToastContent text={text} />, { icon: false, hideProgressBar: true, closeButton: false })\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Basic Context Menu</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Button color='primary' onContextMenu={show} outline>\r\n          Right Click On Me\r\n        </Button>\r\n        <Menu id='menu_id'>\r\n          <Item onClick={() => handleClick('Option 1')}>Item 1</Item>\r\n          <Item onClick={() => handleClick('Option 2')}>Item 2</Item>\r\n        </Menu>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ContextMenuBasic\r\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Third Party Components\r\nimport { Check } from 'react-feather'\r\nimport { toast } from 'react-toastify'\r\nimport { Menu, Item, useContextMenu } from 'react-contexify'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardBody, CardTitle, Button } from 'reactstrap'\r\n\r\nconst ToastContent = ({ text }) => (\r\n  <Fragment>\r\n    <div className='toastify-header pb-0'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color='success' icon={<Check />} />\r\n        <h6 className='toast-title'>{`Clicked ${text}`}</h6>\r\n      </div>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst ContextMenuLeftClick = () => {\r\n  const { show } = useContextMenu({\r\n    id: 'menu_left'\r\n  })\r\n\r\n  const handleClick = text => {\r\n    toast.success(<ToastContent text={text} />, { icon: false, hideProgressBar: true, closeButton: false })\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Left Click</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Button color='primary' onClick={show} outline>\r\n          Left Click On Me\r\n        </Button>\r\n        <Menu id='menu_left'>\r\n          <Item onClick={() => handleClick('Option 1')}>Option 1</Item>\r\n          <Item onClick={() => handleClick('Option 2')}>Option 2</Item>\r\n        </Menu>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ContextMenuLeftClick\r\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Third Party Components\r\nimport { Check } from 'react-feather'\r\nimport { toast } from 'react-toastify'\r\nimport { Menu, Item, useContextMenu } from 'react-contexify'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardBody, CardTitle, Button } from 'reactstrap'\r\n\r\nconst ToastContent = ({ text }) => (\r\n  <Fragment>\r\n    <div className='toastify-header pb-0'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color='success' icon={<Check />} />\r\n        <h6 className='toast-title'>{`Clicked ${text}`}</h6>\r\n      </div>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst ContextMenuDoubleClick = () => {\r\n  const { show } = useContextMenu({\r\n    id: 'menu_double'\r\n  })\r\n\r\n  const handleClick = text => {\r\n    toast.success(<ToastContent text={text} />, { icon: false, hideProgressBar: true, closeButton: false })\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Double Click</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Button color='primary' onDoubleClick={show} outline>\r\n          Double Click On Me\r\n        </Button>\r\n        <Menu id='menu_double'>\r\n          <Item onClick={() => handleClick('Option 1')}>Option 1</Item>\r\n          <Item onClick={() => handleClick('Option 2')}>Option 2</Item>\r\n        </Menu>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ContextMenuDoubleClick\r\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Third Party Components\r\nimport { Check } from 'react-feather'\r\nimport { toast } from 'react-toastify'\r\nimport { Menu, Item, useContextMenu, animation } from 'react-contexify'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardBody, CardTitle, Button } from 'reactstrap'\r\n\r\nconst ToastContent = ({ text }) => (\r\n  <Fragment>\r\n    <div className='toastify-header pb-0'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color='success' icon={<Check />} />\r\n        <h6 className='toast-title'>{`Clicked ${text}`}</h6>\r\n      </div>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst ContextMenuAnimations = () => {\r\n  const { show: showFade } = useContextMenu({\r\n    id: 'fade'\r\n  })\r\n  const { show: showFlip } = useContextMenu({\r\n    id: 'flip'\r\n  })\r\n  const { show: showSlide } = useContextMenu({\r\n    id: 'pop'\r\n  })\r\n\r\n  const handleClick = text => {\r\n    toast.success(<ToastContent text={text} />, { icon: false, hideProgressBar: true, closeButton: false })\r\n  }\r\n\r\n  const FadeMenu = () => {\r\n    return (\r\n      <Menu id='fade' animation={animation.fade}>\r\n        <Item onClick={() => handleClick('Option 1')}>Option 1</Item>\r\n        <Item onClick={() => handleClick('Option 2')}>Option 2</Item>\r\n      </Menu>\r\n    )\r\n  }\r\n  const FlipMenu = () => {\r\n    return (\r\n      <Menu id='flip' animation={animation.flip}>\r\n        <Item onClick={() => handleClick('Option 1')}>Option 1</Item>\r\n        <Item onClick={() => handleClick('Option 2')}>Option 2</Item>\r\n      </Menu>\r\n    )\r\n  }\r\n  const SlideMenu = () => {\r\n    return (\r\n      <Menu id='pop' animation={animation.slide}>\r\n        <Item onClick={() => handleClick('Option 1')}>Option 1</Item>\r\n        <Item onClick={() => handleClick('Option 2')}>Option 2</Item>\r\n      </Menu>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Animations</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <div className='demo-inline-spacing'>\r\n          <Button color='primary' onContextMenu={showFade} outline>\r\n            Fade\r\n          </Button>\r\n\r\n          <Button color='primary' onContextMenu={showFlip} outline>\r\n            Flip\r\n          </Button>\r\n\r\n          <Button color='primary' onContextMenu={showSlide} outline>\r\n            Slide\r\n          </Button>\r\n        </div>\r\n        <FadeMenu />\r\n        <FlipMenu />\r\n        <SlideMenu />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ContextMenuAnimations\r\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col } from 'reactstrap'\r\n\r\n// ** Custom Components\r\nimport ExtensionsHeader from '@components/extensions-header'\r\n\r\n// ** Demo Components\r\nimport ContextSubMenu from './ContextSubmenu'\r\nimport ContextMenuBasic from './ContextMenuBasic'\r\nimport ContextMenuLeftClick from './ContextMenuLeftClick'\r\nimport ContextMenuDoubleClick from './ContextMenuDoubleClick'\r\nimport ContextMenuAnimation from './ContextMenuAnimation'\r\n\r\n// ** Styles\r\nimport 'react-contexify/dist/ReactContexify.min.css'\r\nimport '@styles/react/libs/context-menu/context-menu.scss'\r\n\r\nconst Contexify = () => {\r\n  return (\r\n    <Fragment>\r\n      <ExtensionsHeader\r\n        title='React Contexify'\r\n        subTitle='Adds a context menu to your react app with ease'\r\n        link='https://github.com/fkhadra/react-contexify'\r\n      />\r\n      <Row>\r\n        <Col sm='12'>\r\n          <ContextMenuBasic />\r\n        </Col>\r\n        <Col sm='12'>\r\n          <ContextSubMenu />\r\n        </Col>\r\n        <Col sm='12'>\r\n          <ContextMenuLeftClick />\r\n        </Col>\r\n        <Col sm='12'>\r\n          <ContextMenuDoubleClick />\r\n        </Col>\r\n        <Col sm='12'>\r\n          <ContextMenuAnimation />\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Contexify\r\n","// ** React Imports\r\nimport { forwardRef } from 'react'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport classnames from 'classnames'\r\n\r\n// ** Reactstrap Imports\r\nimport { Badge } from 'reactstrap'\r\n\r\nconst Avatar = forwardRef((props, ref) => {\r\n  // ** Props\r\n  const {\r\n    img,\r\n    size,\r\n    icon,\r\n    color,\r\n    status,\r\n    badgeUp,\r\n    content,\r\n    tag: Tag,\r\n    initials,\r\n    imgWidth,\r\n    className,\r\n    badgeText,\r\n    imgHeight,\r\n    badgeColor,\r\n    imgClassName,\r\n    contentStyles,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** Function to extract initials from content\r\n  const getInitials = str => {\r\n    const results = []\r\n    const wordArray = str.split(' ')\r\n    wordArray.forEach(e => {\r\n      results.push(e[0])\r\n    })\r\n    return results.join('')\r\n  }\r\n\r\n  return (\r\n    <Tag\r\n      className={classnames('avatar', {\r\n        [className]: className,\r\n        [`bg-${color}`]: color,\r\n        [`avatar-${size}`]: size\r\n      })}\r\n      ref={ref}\r\n      {...rest}\r\n    >\r\n      {img === false || img === undefined ? (\r\n        <span\r\n          className={classnames('avatar-content', {\r\n            'position-relative': badgeUp\r\n          })}\r\n          style={contentStyles}\r\n        >\r\n          {initials ? getInitials(content) : content}\r\n\r\n          {icon ? icon : null}\r\n          {badgeUp ? (\r\n            <Badge color={badgeColor ? badgeColor : 'primary'} className='badge-sm badge-up' pill>\r\n              {badgeText ? badgeText : '0'}\r\n            </Badge>\r\n          ) : null}\r\n        </span>\r\n      ) : (\r\n        <img\r\n          className={classnames({\r\n            [imgClassName]: imgClassName\r\n          })}\r\n          src={img}\r\n          alt='avatarImg'\r\n          height={imgHeight && !size ? imgHeight : 32}\r\n          width={imgWidth && !size ? imgWidth : 32}\r\n        />\r\n      )}\r\n      {status ? (\r\n        <span\r\n          className={classnames({\r\n            [`avatar-status-${status}`]: status,\r\n            [`avatar-status-${size}`]: size\r\n          })}\r\n        ></span>\r\n      ) : null}\r\n    </Tag>\r\n  )\r\n})\r\n\r\nexport default Avatar\r\n\r\n// ** PropTypes\r\nAvatar.propTypes = {\r\n  icon: Proptypes.node,\r\n  src: Proptypes.string,\r\n  badgeUp: Proptypes.bool,\r\n  content: Proptypes.string,\r\n  badgeText: Proptypes.string,\r\n  className: Proptypes.string,\r\n  imgClassName: Proptypes.string,\r\n  contentStyles: Proptypes.object,\r\n  size: Proptypes.oneOf(['sm', 'lg', 'xl']),\r\n  tag: Proptypes.oneOfType([Proptypes.func, Proptypes.string]),\r\n  status: Proptypes.oneOf(['online', 'offline', 'away', 'busy']),\r\n  imgHeight: Proptypes.oneOfType([Proptypes.string, Proptypes.number]),\r\n  imgWidth: Proptypes.oneOfType([Proptypes.string, Proptypes.number]),\r\n  badgeColor: Proptypes.oneOf([\r\n    'primary',\r\n    'secondary',\r\n    'success',\r\n    'danger',\r\n    'info',\r\n    'warning',\r\n    'dark',\r\n    'light-primary',\r\n    'light-secondary',\r\n    'light-success',\r\n    'light-danger',\r\n    'light-info',\r\n    'light-warning',\r\n    'light-dark'\r\n  ]),\r\n  color: Proptypes.oneOf([\r\n    'primary',\r\n    'secondary',\r\n    'success',\r\n    'danger',\r\n    'info',\r\n    'warning',\r\n    'dark',\r\n    'light-primary',\r\n    'light-secondary',\r\n    'light-success',\r\n    'light-danger',\r\n    'light-info',\r\n    'light-warning',\r\n    'light-dark'\r\n  ]),\r\n  initials(props) {\r\n    if (props['initials'] && props['content'] === undefined) {\r\n      return new Error('content prop is required with initials prop.')\r\n    }\r\n    if (props['initials'] && typeof props['content'] !== 'string') {\r\n      return new Error('content prop must be a string.')\r\n    }\r\n    if (typeof props['initials'] !== 'boolean' && props['initials'] !== undefined) {\r\n      return new Error('initials must be a boolean!')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nAvatar.defaultProps = {\r\n  tag: 'div'\r\n}\r\n","// ** React Imports\r\nimport Proptypes from 'prop-types'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col } from 'reactstrap'\r\n\r\nconst ExtensionsHeader = props => {\r\n  return (\r\n    <Row className='mb-2'>\r\n      <Col sm='12' className='ms-50'>\r\n        <p className='font-medium-5 mt-1 extension-title' data-tour='extension-title'>\r\n          {props.title}\r\n        </p>\r\n        {props.link ? (\r\n          <a href={props.link} target='_blank' rel='noopener noreferrer'>\r\n            {props.subTitle}\r\n          </a>\r\n        ) : (\r\n          <p className='text-primary'>{props.subTitle}</p>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\nexport default ExtensionsHeader\r\n\r\n// ** PropTypes\r\nExtensionsHeader.propTypes = {\r\n  link: Proptypes.string,\r\n  title: Proptypes.string.isRequired,\r\n  subTitle: Proptypes.string.isRequired\r\n}\r\n"],"sourceRoot":""}