{"version":3,"sources":["views/forms/form-elements/file-uploader/FileUploaderSingle.js","views/forms/form-elements/file-uploader/FileUploaderMultiple.js","views/forms/form-elements/file-uploader/FileUploaderRestrictions.js","views/forms/form-elements/file-uploader/index.js","@core/components/avatar/index.js","@core/components/extensions-header/index.js"],"names":["FileUploaderSingle","files","setFiles","useState","getRootProps","getInputProps","useDropzone","multiple","onDrop","acceptedFiles","map","file","Object","assign","renderFilePreview","type","startsWith","className","alt","name","src","URL","createObjectURL","height","width","size","fileList","index","Math","round","toFixed","color","outline","onClick","filtered","filter","i","handleRemoveFile","tag","href","e","preventDefault","length","FileUploaderMultiple","ErrorToast","icon","role","FileUploaderRestrictions","accept","rejectedFiles","toast","error","hideProgressBar","Uploader","title","link","subTitle","sm","Avatar","forwardRef","props","ref","img","status","badgeUp","content","Tag","initials","imgWidth","badgeText","imgHeight","badgeColor","imgClassName","contentStyles","rest","classnames","undefined","style","str","results","split","forEach","push","join","getInitials","pill","defaultProps","ExtensionsHeader","target","rel"],"mappings":"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","file":"static/js/55.38b1c4f1.chunk.js","sourcesContent":["// ** React Imports\r\nimport { useState, Fragment } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardTitle, CardBody, Button, ListGroup, ListGroupItem } from 'reactstrap'\r\n\r\n// ** Third Party Imports\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { FileText, X, DownloadCloud } from 'react-feather'\r\n\r\nconst FileUploaderSingle = () => {\r\n  // ** State\r\n  const [files, setFiles] = useState([])\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    multiple: false,\r\n    onDrop: acceptedFiles => {\r\n      setFiles([...files, ...acceptedFiles.map(file => Object.assign(file))])\r\n    }\r\n  })\r\n\r\n  const renderFilePreview = file => {\r\n    if (file.type.startsWith('image')) {\r\n      return <img className='rounded' alt={file.name} src={URL.createObjectURL(file)} height='28' width='28' />\r\n    } else {\r\n      return <FileText size='28' />\r\n    }\r\n  }\r\n\r\n  const handleRemoveFile = file => {\r\n    const uploadedFiles = files\r\n    const filtered = uploadedFiles.filter(i => i.name !== file.name)\r\n    setFiles([...filtered])\r\n  }\r\n\r\n  const renderFileSize = size => {\r\n    if (Math.round(size / 100) / 10 > 1000) {\r\n      return `${(Math.round(size / 100) / 10000).toFixed(1)} mb`\r\n    } else {\r\n      return `${(Math.round(size / 100) / 10).toFixed(1)} kb`\r\n    }\r\n  }\r\n\r\n  const fileList = files.map((file, index) => (\r\n    <ListGroupItem key={`${file.name}-${index}`} className='d-flex align-items-center justify-content-between'>\r\n      <div className='file-details d-flex align-items-center'>\r\n        <div className='file-preview me-1'>{renderFilePreview(file)}</div>\r\n        <div>\r\n          <p className='file-name mb-0'>{file.name}</p>\r\n          <p className='file-size mb-0'>{renderFileSize(file.size)}</p>\r\n        </div>\r\n      </div>\r\n      <Button color='danger' outline size='sm' className='btn-icon' onClick={() => handleRemoveFile(file)}>\r\n        <X size={14} />\r\n      </Button>\r\n    </ListGroupItem>\r\n  ))\r\n\r\n  const handleRemoveAllFiles = () => {\r\n    setFiles([])\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Single</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <div {...getRootProps({ className: 'dropzone' })}>\r\n          <input {...getInputProps()} />\r\n          <div className='d-flex align-items-center justify-content-center flex-column'>\r\n            <DownloadCloud size={64} />\r\n            <h5>Drop Files here or click to upload</h5>\r\n            <p className='text-secondary'>\r\n              Drop files here or click{' '}\r\n              <a href='/' onClick={e => e.preventDefault()}>\r\n                browse\r\n              </a>{' '}\r\n              thorough your machine\r\n            </p>\r\n          </div>\r\n        </div>\r\n        {files.length ? (\r\n          <Fragment>\r\n            <ListGroup className='my-2'>{fileList}</ListGroup>\r\n            <div className='d-flex justify-content-end'>\r\n              <Button className='me-1' color='danger' outline onClick={handleRemoveAllFiles}>\r\n                Remove All\r\n              </Button>\r\n              <Button color='primary'>Upload Files</Button>\r\n            </div>\r\n          </Fragment>\r\n        ) : null}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default FileUploaderSingle\r\n","// ** React Imports\r\nimport { useState, Fragment } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardTitle, CardBody, Button, ListGroup, ListGroupItem } from 'reactstrap'\r\n\r\n// ** Third Party Imports\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { FileText, X, DownloadCloud } from 'react-feather'\r\n\r\nconst FileUploaderMultiple = () => {\r\n  // ** State\r\n  const [files, setFiles] = useState([])\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    onDrop: acceptedFiles => {\r\n      setFiles([...files, ...acceptedFiles.map(file => Object.assign(file))])\r\n    }\r\n  })\r\n\r\n  const renderFilePreview = file => {\r\n    if (file.type.startsWith('image')) {\r\n      return <img className='rounded' alt={file.name} src={URL.createObjectURL(file)} height='28' width='28' />\r\n    } else {\r\n      return <FileText size='28' />\r\n    }\r\n  }\r\n\r\n  const handleRemoveFile = file => {\r\n    const uploadedFiles = files\r\n    const filtered = uploadedFiles.filter(i => i.name !== file.name)\r\n    setFiles([...filtered])\r\n  }\r\n\r\n  const renderFileSize = size => {\r\n    if (Math.round(size / 100) / 10 > 1000) {\r\n      return `${(Math.round(size / 100) / 10000).toFixed(1)} mb`\r\n    } else {\r\n      return `${(Math.round(size / 100) / 10).toFixed(1)} kb`\r\n    }\r\n  }\r\n\r\n  const fileList = files.map((file, index) => (\r\n    <ListGroupItem key={`${file.name}-${index}`} className='d-flex align-items-center justify-content-between'>\r\n      <div className='file-details d-flex align-items-center'>\r\n        <div className='file-preview me-1'>{renderFilePreview(file)}</div>\r\n        <div>\r\n          <p className='file-name mb-0'>{file.name}</p>\r\n          <p className='file-size mb-0'>{renderFileSize(file.size)}</p>\r\n        </div>\r\n      </div>\r\n      <Button color='danger' outline size='sm' className='btn-icon' onClick={() => handleRemoveFile(file)}>\r\n        <X size={14} />\r\n      </Button>\r\n    </ListGroupItem>\r\n  ))\r\n\r\n  const handleRemoveAllFiles = () => {\r\n    setFiles([])\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Multiple</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <div {...getRootProps({ className: 'dropzone' })}>\r\n          <input {...getInputProps()} />\r\n          <div className='d-flex align-items-center justify-content-center flex-column'>\r\n            <DownloadCloud size={64} />\r\n            <h5>Drop Files here or click to upload</h5>\r\n            <p className='text-secondary'>\r\n              Drop files here or click{' '}\r\n              <a href='/' onClick={e => e.preventDefault()}>\r\n                browse\r\n              </a>{' '}\r\n              thorough your machine\r\n            </p>\r\n          </div>\r\n        </div>\r\n        {files.length ? (\r\n          <Fragment>\r\n            <ListGroup className='my-2'>{fileList}</ListGroup>\r\n            <div className='d-flex justify-content-end'>\r\n              <Button className='me-1' color='danger' outline onClick={handleRemoveAllFiles}>\r\n                Remove All\r\n              </Button>\r\n              <Button color='primary'>Upload Files</Button>\r\n            </div>\r\n          </Fragment>\r\n        ) : null}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default FileUploaderMultiple\r\n","// ** React Imports\r\nimport { useState, Fragment } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardTitle, CardBody, Button, ListGroup, ListGroupItem } from 'reactstrap'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Third Party Imports\r\nimport { toast } from 'react-toastify'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { X, DownloadCloud } from 'react-feather'\r\n\r\nconst ErrorToast = () => (\r\n  <Fragment>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color='danger' icon={<X size={12} />} />\r\n        <h6 className='toast-title'>Error!</h6>\r\n      </div>\r\n      <small className='text-muted'>a second ago</small>\r\n    </div>\r\n    <div className='toastify-body'>\r\n      <span role='img' aria-label='toast-text'>\r\n        👋 You can only upload image Files!.\r\n      </span>\r\n    </div>\r\n  </Fragment>\r\n)\r\n\r\nconst FileUploaderRestrictions = () => {\r\n  // ** State\r\n  const [files, setFiles] = useState([])\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    multiple: false,\r\n    accept: 'image/*',\r\n    onDrop: (acceptedFiles, rejectedFiles) => {\r\n      if (rejectedFiles.length) {\r\n        toast.error(<ErrorToast />, { icon: false, hideProgressBar: true })\r\n      } else {\r\n        setFiles([...files, ...acceptedFiles.map(file => Object.assign(file))])\r\n      }\r\n    }\r\n  })\r\n\r\n  const handleRemoveFile = file => {\r\n    const uploadedFiles = files\r\n    const filtered = uploadedFiles.filter(i => i.name !== file.name)\r\n    setFiles([...filtered])\r\n  }\r\n\r\n  const renderFileSize = size => {\r\n    if (Math.round(size / 100) / 10 > 1000) {\r\n      return `${(Math.round(size / 100) / 10000).toFixed(1)} mb`\r\n    } else {\r\n      return `${(Math.round(size / 100) / 10).toFixed(1)} kb`\r\n    }\r\n  }\r\n\r\n  const fileList = files.map((file, index) => (\r\n    <ListGroupItem key={`${file.name}-${index}`} className='d-flex align-items-center justify-content-between'>\r\n      <div className='file-details d-flex align-items-center'>\r\n        <div className='file-preview me-1'>\r\n          <img className='rounded' alt={file.name} src={URL.createObjectURL(file)} height='28' width='28' />\r\n        </div>\r\n        <div>\r\n          <p className='file-name mb-0'>{file.name}</p>\r\n          <p className='file-size mb-0'>{renderFileSize(file.size)}</p>\r\n        </div>\r\n      </div>\r\n      <Button color='danger' outline size='sm' className='btn-icon' onClick={() => handleRemoveFile(file)}>\r\n        <X size={14} />\r\n      </Button>\r\n    </ListGroupItem>\r\n  ))\r\n\r\n  const handleRemoveAllFiles = () => {\r\n    setFiles([])\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Restrictions</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <div {...getRootProps({ className: 'dropzone' })}>\r\n          <input {...getInputProps()} />\r\n          <div className='d-flex align-items-center justify-content-center flex-column'>\r\n            <DownloadCloud size={64} />\r\n            <h5>Drop Files here or click to upload</h5>\r\n            <p className='text-secondary'>\r\n              Drop files here or click{' '}\r\n              <a href='/' onClick={e => e.preventDefault()}>\r\n                browse\r\n              </a>{' '}\r\n              thorough your machine\r\n            </p>\r\n          </div>\r\n        </div>\r\n        {files.length ? (\r\n          <Fragment>\r\n            <ListGroup className='my-2'>{fileList}</ListGroup>\r\n            <div className='d-flex justify-content-end'>\r\n              <Button className='me-1' color='danger' outline onClick={handleRemoveAllFiles}>\r\n                Remove All\r\n              </Button>\r\n              <Button color='primary'>Upload Files</Button>\r\n            </div>\r\n          </Fragment>\r\n        ) : null}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default FileUploaderRestrictions\r\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col } from 'reactstrap'\r\n\r\n// ** Custom Components\r\nimport ExtensionsHeader from '@components/extensions-header'\r\n\r\n// ** Demo Components\r\nimport FileUploaderSingle from './FileUploaderSingle'\r\nimport FileUploaderMultiple from './FileUploaderMultiple'\r\nimport FileUploaderRestrictions from './FileUploaderRestrictions'\r\n\r\n// ** Styles\r\nimport '@styles/react/libs/file-uploader/file-uploader.scss'\r\n\r\nconst Uploader = () => {\r\n  return (\r\n    <Fragment>\r\n      <ExtensionsHeader\r\n        title='React Dropzone'\r\n        link='https://github.com/react-dropzone/react-dropzone'\r\n        subTitle=\"Simple React hook to create a HTML5-compliant drag'n'drop zone for files.\"\r\n      />\r\n\r\n      <Row>\r\n        <Col sm='12'>\r\n          <FileUploaderMultiple />\r\n        </Col>\r\n        <Col sm='12'>\r\n          <FileUploaderSingle />\r\n        </Col>\r\n        <Col sm='12'>\r\n          <FileUploaderRestrictions />\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Uploader\r\n","// ** React Imports\r\nimport { forwardRef } from 'react'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport classnames from 'classnames'\r\n\r\n// ** Reactstrap Imports\r\nimport { Badge } from 'reactstrap'\r\n\r\nconst Avatar = forwardRef((props, ref) => {\r\n  // ** Props\r\n  const {\r\n    img,\r\n    size,\r\n    icon,\r\n    color,\r\n    status,\r\n    badgeUp,\r\n    content,\r\n    tag: Tag,\r\n    initials,\r\n    imgWidth,\r\n    className,\r\n    badgeText,\r\n    imgHeight,\r\n    badgeColor,\r\n    imgClassName,\r\n    contentStyles,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** Function to extract initials from content\r\n  const getInitials = str => {\r\n    const results = []\r\n    const wordArray = str.split(' ')\r\n    wordArray.forEach(e => {\r\n      results.push(e[0])\r\n    })\r\n    return results.join('')\r\n  }\r\n\r\n  return (\r\n    <Tag\r\n      className={classnames('avatar', {\r\n        [className]: className,\r\n        [`bg-${color}`]: color,\r\n        [`avatar-${size}`]: size\r\n      })}\r\n      ref={ref}\r\n      {...rest}\r\n    >\r\n      {img === false || img === undefined ? (\r\n        <span\r\n          className={classnames('avatar-content', {\r\n            'position-relative': badgeUp\r\n          })}\r\n          style={contentStyles}\r\n        >\r\n          {initials ? getInitials(content) : content}\r\n\r\n          {icon ? icon : null}\r\n          {badgeUp ? (\r\n            <Badge color={badgeColor ? badgeColor : 'primary'} className='badge-sm badge-up' pill>\r\n              {badgeText ? badgeText : '0'}\r\n            </Badge>\r\n          ) : null}\r\n        </span>\r\n      ) : (\r\n        <img\r\n          className={classnames({\r\n            [imgClassName]: imgClassName\r\n          })}\r\n          src={img}\r\n          alt='avatarImg'\r\n          height={imgHeight && !size ? imgHeight : 32}\r\n          width={imgWidth && !size ? imgWidth : 32}\r\n        />\r\n      )}\r\n      {status ? (\r\n        <span\r\n          className={classnames({\r\n            [`avatar-status-${status}`]: status,\r\n            [`avatar-status-${size}`]: size\r\n          })}\r\n        ></span>\r\n      ) : null}\r\n    </Tag>\r\n  )\r\n})\r\n\r\nexport default Avatar\r\n\r\n// ** PropTypes\r\nAvatar.propTypes = {\r\n  icon: Proptypes.node,\r\n  src: Proptypes.string,\r\n  badgeUp: Proptypes.bool,\r\n  content: Proptypes.string,\r\n  badgeText: Proptypes.string,\r\n  className: Proptypes.string,\r\n  imgClassName: Proptypes.string,\r\n  contentStyles: Proptypes.object,\r\n  size: Proptypes.oneOf(['sm', 'lg', 'xl']),\r\n  tag: Proptypes.oneOfType([Proptypes.func, Proptypes.string]),\r\n  status: Proptypes.oneOf(['online', 'offline', 'away', 'busy']),\r\n  imgHeight: Proptypes.oneOfType([Proptypes.string, Proptypes.number]),\r\n  imgWidth: Proptypes.oneOfType([Proptypes.string, Proptypes.number]),\r\n  badgeColor: Proptypes.oneOf([\r\n    'primary',\r\n    'secondary',\r\n    'success',\r\n    'danger',\r\n    'info',\r\n    'warning',\r\n    'dark',\r\n    'light-primary',\r\n    'light-secondary',\r\n    'light-success',\r\n    'light-danger',\r\n    'light-info',\r\n    'light-warning',\r\n    'light-dark'\r\n  ]),\r\n  color: Proptypes.oneOf([\r\n    'primary',\r\n    'secondary',\r\n    'success',\r\n    'danger',\r\n    'info',\r\n    'warning',\r\n    'dark',\r\n    'light-primary',\r\n    'light-secondary',\r\n    'light-success',\r\n    'light-danger',\r\n    'light-info',\r\n    'light-warning',\r\n    'light-dark'\r\n  ]),\r\n  initials(props) {\r\n    if (props['initials'] && props['content'] === undefined) {\r\n      return new Error('content prop is required with initials prop.')\r\n    }\r\n    if (props['initials'] && typeof props['content'] !== 'string') {\r\n      return new Error('content prop must be a string.')\r\n    }\r\n    if (typeof props['initials'] !== 'boolean' && props['initials'] !== undefined) {\r\n      return new Error('initials must be a boolean!')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nAvatar.defaultProps = {\r\n  tag: 'div'\r\n}\r\n","// ** React Imports\r\nimport Proptypes from 'prop-types'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col } from 'reactstrap'\r\n\r\nconst ExtensionsHeader = props => {\r\n  return (\r\n    <Row className='mb-2'>\r\n      <Col sm='12' className='ms-50'>\r\n        <p className='font-medium-5 mt-1 extension-title' data-tour='extension-title'>\r\n          {props.title}\r\n        </p>\r\n        {props.link ? (\r\n          <a href={props.link} target='_blank' rel='noopener noreferrer'>\r\n            {props.subTitle}\r\n          </a>\r\n        ) : (\r\n          <p className='text-primary'>{props.subTitle}</p>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\nexport default ExtensionsHeader\r\n\r\n// ** PropTypes\r\nExtensionsHeader.propTypes = {\r\n  link: Proptypes.string,\r\n  title: Proptypes.string.isRequired,\r\n  subTitle: Proptypes.string.isRequired\r\n}\r\n"],"sourceRoot":""}