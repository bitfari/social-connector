{"version":3,"sources":["views/components/modal/ModalBasic.js","views/components/modal/ModalSizes.js","views/components/modal/ModalThemes.js","views/components/modal/ModalEvents.js","views/components/modal/ModalUnmount.js","views/components/modal/ModalFormAndScroll.js","views/components/modal/ModalSourceCode.js","views/components/modal/index.js","@core/components/breadcrumbs/index.js","@core/components/card-snippet/index.js"],"names":["ModalBasic","basicModal","setBasicModal","useState","centeredModal","setCenteredModal","disabledModal","setDisabledModal","disabledAnimation","setDisabledAnimation","className","color","outline","onClick","isOpen","toggle","backdrop","fade","ModalConfig","id","btnTitle","modalTitle","modalClass","ModalSizes","modal","setModal","toggleModal","renderModal","map","item","title","modalColor","btnColor","ModalTheme","modalClassName","ModalEvents","modalOpened","setModalOpened","modalClosed","setModalClosed","onOpened","alert","onClosed","ModalDestructuring","visibility","setVisibility","unmountOnClose","setUnmountOnClose","onSubmit","e","preventDefault","sm","md","lg","type","name","onChange","value","target","JSON","parse","changeUnmountOnClose","placeholder","rows","ModalForm","formModal","setFormModal","firstModal","setFirstModal","secondModal","setSecondModal","scrollModal","setScrollModal","scrollInnerModal","setScrollInnerModal","for","scrollable","modalBasic","modalTheme","modalSizes","modalEvents","modalForm","modalUnmount","Modals","useEffect","Prism","highlightAll","breadCrumbTitle","breadCrumbParent","breadCrumbActive","code","ModalThemes","ModalFormAndScroll","ModalUnmount","BreadCrumbs","props","breadCrumbParent2","breadCrumbParent3","tag","to","active","size","end","Link","CardSnippet","children","noBody","iconCode","setIsOpen","IconCode","Wrapper","Fragment","CardBody"],"mappings":"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","file":"static/js/86.dbde83a5.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Alert } from 'reactstrap'\r\n\r\nconst ModalBasic = () => {\r\n  // ** States\r\n  const [basicModal, setBasicModal] = useState(false)\r\n  const [centeredModal, setCenteredModal] = useState(false)\r\n  const [disabledModal, setDisabledModal] = useState(false)\r\n  const [disabledAnimation, setDisabledAnimation] = useState(false)\r\n\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div className='basic-modal'>\r\n        <Button color='primary' outline onClick={() => setBasicModal(!basicModal)}>\r\n          Basic Modal\r\n        </Button>\r\n        <Modal isOpen={basicModal} toggle={() => setBasicModal(!basicModal)}>\r\n          <ModalHeader toggle={() => setBasicModal(!basicModal)}>Basic Modal</ModalHeader>\r\n          <ModalBody>\r\n            <h5>Check First Paragraph</h5>\r\n            Oat cake ice cream candy chocolate cake chocolate cake cotton candy dragée apple pie. Brownie carrot cake\r\n            candy canes bonbon fruitcake topping halvah. Cake sweet roll cake cheesecake cookie chocolate cake\r\n            liquorice.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setBasicModal(!basicModal)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div className='vertically-centered-modal'>\r\n        <Button color='primary' outline onClick={() => setCenteredModal(!centeredModal)}>\r\n          Vertically Centered\r\n        </Button>\r\n        <Modal isOpen={centeredModal} toggle={() => setCenteredModal(!centeredModal)} className='modal-dialog-centered'>\r\n          <ModalHeader toggle={() => setCenteredModal(!centeredModal)}>Vertically Centered</ModalHeader>\r\n          <ModalBody>\r\n            Oat cake ice cream candy chocolate cake chocolate cake cotton candy dragée apple pie. Brownie carrot cake\r\n            candy canes bonbon fruitcake topping halvah. Cake sweet roll cake cheesecake cookie chocolate cake\r\n            liquorice.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setCenteredModal(!centeredModal)}>\r\n              Accept\r\n            </Button>{' '}\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div className='disabled-backdrop-modal'>\r\n        <Fragment>\r\n          <Button color='primary' outline onClick={() => setDisabledModal(!disabledModal)}>\r\n            Disabled Backdrop\r\n          </Button>\r\n          <Modal\r\n            isOpen={disabledModal}\r\n            toggle={() => setDisabledModal(!disabledModal)}\r\n            className='modal-dialog-centered'\r\n            backdrop={false}\r\n          >\r\n            <ModalHeader toggle={() => setDisabledModal(!disabledModal)}>Disabled Backdrop</ModalHeader>\r\n            <ModalBody>\r\n              Candy oat cake topping topping chocolate cake. Icing pudding jelly beans I love chocolate carrot cake\r\n              wafer candy canes. Biscuit croissant fruitcake bonbon soufflé.\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button color='primary' onClick={() => setDisabledModal(!disabledModal)}>\r\n                Accept\r\n              </Button>{' '}\r\n            </ModalFooter>\r\n          </Modal>\r\n        </Fragment>\r\n      </div>\r\n      <div className='disabled-animation-modal'>\r\n        <Button color='primary' outline onClick={() => setDisabledAnimation(!disabledAnimation)}>\r\n          Disabled Animation\r\n        </Button>\r\n        <Modal\r\n          isOpen={disabledAnimation}\r\n          toggle={() => setDisabledAnimation(!disabledAnimation)}\r\n          className='modal-dialog-centered'\r\n          fade={false}\r\n        >\r\n          <ModalHeader toggle={() => setDisabledAnimation(!disabledAnimation)}>Disabled Fade</ModalHeader>\r\n          <ModalBody>\r\n            Chocolate bar jelly dragée cupcake chocolate bar I love donut liquorice. Powder I love marzipan donut candy\r\n            canes jelly-o. Dragée liquorice apple pie candy biscuit danish lemon drops sugar plum.\r\n            <Alert className='mt-1' color='success'>\r\n              <div className='alert-body'>Well done! You successfully read this important alert message.</div>\r\n            </Alert>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setDisabledAnimation(!disabledAnimation)}>\r\n              Accept\r\n            </Button>{' '}\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default ModalBasic\r\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\nconst ModalConfig = [\r\n  {\r\n    id: 1,\r\n    btnTitle: 'Extra Small',\r\n    modalTitle: 'Extra Small modal',\r\n    modalClass: 'modal-xs'\r\n  },\r\n  {\r\n    id: 2,\r\n    btnTitle: 'Small Modal',\r\n    modalTitle: 'Small Modal',\r\n    modalClass: 'modal-sm'\r\n  },\r\n  {\r\n    id: 3,\r\n    btnTitle: 'Default Modal',\r\n    modalTitle: 'Default Modal',\r\n    modalClass: ''\r\n  },\r\n  {\r\n    id: 4,\r\n    btnTitle: 'Large Modal',\r\n    modalTitle: 'Large Modal',\r\n    modalClass: 'modal-lg'\r\n  },\r\n  {\r\n    id: 5,\r\n    btnTitle: 'Extra Large Modal',\r\n    modalTitle: 'Extra Large Modal',\r\n    modalClass: 'modal-xl'\r\n  },\r\n  {\r\n    id: 6,\r\n    btnTitle: 'Fullscreen Modal',\r\n    modalTitle: 'Fullscreen Modal',\r\n    modalClass: 'modal-fullscreen'\r\n  }\r\n]\r\n\r\nconst ModalSizes = () => {\r\n  // ** State\r\n  const [modal, setModal] = useState(null)\r\n\r\n  const toggleModal = id => {\r\n    if (modal !== id) {\r\n      setModal(id)\r\n    } else {\r\n      setModal(null)\r\n    }\r\n  }\r\n\r\n  const renderModal = ModalConfig.map(item => {\r\n    return (\r\n      <Fragment key={item.id}>\r\n        <div>\r\n          <Button color='primary' onClick={() => toggleModal(item.id)} key={item.title} outline>\r\n            {item.btnTitle}\r\n          </Button>\r\n        </div>\r\n        <Modal\r\n          key={item.id}\r\n          isOpen={modal === item.id}\r\n          toggle={() => toggleModal(item.id)}\r\n          className={`modal-dialog-centered ${item.modalClass}`}\r\n        >\r\n          <ModalHeader toggle={() => toggleModal(item.id)}>\r\n            {item.modalTitle}\r\n            {item.title}\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            {item.id === 6 ? (\r\n              <Fragment>\r\n                <p>\r\n                  Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas\r\n                  eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                </p>\r\n                <p>\r\n                  Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue\r\n                  laoreet rutrum faucibus dolor auctor.\r\n                </p>\r\n                <p>\r\n                  Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl\r\n                  consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                </p>\r\n                <p>\r\n                  Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas\r\n                  eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                </p>\r\n                <p>\r\n                  Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue\r\n                  laoreet rutrum faucibus dolor auctor.\r\n                </p>\r\n                <p>\r\n                  Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl\r\n                  consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                </p>\r\n                <p>\r\n                  Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas\r\n                  eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                </p>\r\n                <p>\r\n                  Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue\r\n                  laoreet rutrum faucibus dolor auctor.\r\n                </p>\r\n                <p>\r\n                  Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl\r\n                  consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                </p>\r\n                <p>\r\n                  Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas\r\n                  eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                </p>\r\n                <p>\r\n                  Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue\r\n                  laoreet rutrum faucibus dolor auctor.\r\n                </p>\r\n                <p>\r\n                  Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl\r\n                  consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                </p>\r\n                <p>\r\n                  Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas\r\n                  eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                </p>\r\n                <p>\r\n                  Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue\r\n                  laoreet rutrum faucibus dolor auctor.\r\n                </p>\r\n                <p>\r\n                  Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl\r\n                  consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                </p>\r\n                <p>\r\n                  Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas\r\n                  eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                </p>\r\n                <p>\r\n                  Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue\r\n                  laoreet rutrum faucibus dolor auctor.\r\n                </p>\r\n                <p>\r\n                  Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl\r\n                  consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                </p>\r\n              </Fragment>\r\n            ) : (\r\n              `Halvah powder wafer. Chupa chups pie topping carrot cake cake. Tootsie roll sesame snaps jelly-o marshmallow\r\n            marshmallow jelly jujubes candy. Chupa chups cheesecake gingerbread chupa chups cake candy canes sweet roll.`\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => toggleModal(item.id)} outline>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </Fragment>\r\n    )\r\n  })\r\n\r\n  return <div className='demo-inline-spacing'>{renderModal}</div>\r\n}\r\nexport default ModalSizes\r\n","// ** React Imports\r\nimport { useState } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\nconst ModalConfig = [\r\n  {\r\n    id: 1,\r\n    title: 'Primary',\r\n    modalColor: 'modal-primary',\r\n    btnColor: 'primary'\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'Secondary',\r\n    modalColor: 'modal-secondary',\r\n    btnColor: 'secondary'\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'Success',\r\n    modalColor: 'modal-success',\r\n    btnColor: 'success'\r\n  },\r\n  {\r\n    id: 4,\r\n    title: 'Danger',\r\n    modalColor: 'modal-danger',\r\n    btnColor: 'danger'\r\n  },\r\n  {\r\n    id: 5,\r\n    title: 'Warning',\r\n    modalColor: 'modal-warning',\r\n    btnColor: 'warning'\r\n  },\r\n  {\r\n    id: 6,\r\n    title: 'Info',\r\n    modalColor: 'modal-info',\r\n    btnColor: 'info'\r\n  },\r\n  {\r\n    id: 7,\r\n    title: 'Dark',\r\n    modalColor: 'modal-dark',\r\n    btnColor: 'dark'\r\n  }\r\n]\r\n\r\nconst ModalTheme = () => {\r\n  // ** State\r\n  const [modal, setModal] = useState(null)\r\n\r\n  const toggleModal = id => {\r\n    if (modal !== id) {\r\n      setModal(id)\r\n    } else {\r\n      setModal(null)\r\n    }\r\n  }\r\n\r\n  const renderModal = ModalConfig.map(item => {\r\n    return (\r\n      <div className={`theme-${item.modalColor}`} key={item.id}>\r\n        <Button color={item.btnColor} onClick={() => toggleModal(item.id)} key={item.title} outline>\r\n          {item.title}\r\n        </Button>\r\n        <Modal\r\n          isOpen={modal === item.id}\r\n          toggle={() => toggleModal(item.id)}\r\n          className='modal-dialog-centered'\r\n          modalClassName={item.modalColor}\r\n          key={item.id}\r\n        >\r\n          <ModalHeader toggle={() => toggleModal(item.id)}>{item.title}</ModalHeader>\r\n          <ModalBody>\r\n            Tart lemon drops macaroon oat cake chocolate toffee chocolate bar icing. Pudding jelly beans carrot cake\r\n            pastry gummies cheesecake lollipop. I love cookie lollipop cake I love sweet gummi bears cupcake dessert.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color={item.btnColor} onClick={() => toggleModal(item.id)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  })\r\n\r\n  return <div className='demo-inline-spacing'>{renderModal}</div>\r\n}\r\nexport default ModalTheme\r\n","// ** React Imports\r\nimport { useState } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\nconst ModalEvents = () => {\r\n  // ** States\r\n  const [modalOpened, setModalOpened] = useState(false)\r\n  const [modalClosed, setModalClosed] = useState(false)\r\n\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div className='on-opened-modal'>\r\n        <Button color='primary' outline onClick={() => setModalOpened(!modalOpened)}>\r\n          On Opened\r\n        </Button>\r\n        <Modal\r\n          isOpen={modalOpened}\r\n          onOpened={() => alert('On Opened Event Fired')}\r\n          toggle={() => setModalOpened(!modalOpened)}\r\n          className='modal-dialog-centered'\r\n        >\r\n          <ModalHeader toggle={() => setModalOpened(!modalOpened)}>Basic Modal</ModalHeader>\r\n          <ModalBody>\r\n            Donut chocolate halvah I love caramels. Dessert croissant I love icing I love dragée candy canes chocolate\r\n            bar. Oat cake lollipop I love cake chocolate bar jelly sweet. I love cotton candy oat cake jelly.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setModalOpened(!modalOpened)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div className='on-closed-modal'>\r\n        <Button color='primary' outline onClick={() => setModalClosed(!modalClosed)}>\r\n          On Closed\r\n        </Button>\r\n        <Modal\r\n          isOpen={modalClosed}\r\n          onClosed={() => alert('On Closed Event Fired')}\r\n          toggle={() => setModalClosed(!modalClosed)}\r\n          className='modal-dialog-centered'\r\n        >\r\n          <ModalHeader toggle={() => setModalClosed(!modalClosed)}>Basic Modal</ModalHeader>\r\n          <ModalBody>\r\n            Donut chocolate halvah I love caramels. Dessert croissant I love icing I love dragée candy canes chocolate\r\n            bar. Oat cake lollipop I love cake chocolate bar jelly sweet. I love cotton candy oat cake jelly.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setModalClosed(!modalClosed)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalEvents\r\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Form, Row, Col } from 'reactstrap'\r\n\r\nconst ModalDestructuring = () => {\r\n  // ** States\r\n  const [visibility, setVisibility] = useState(false)\r\n  const [unmountOnClose, setUnmountOnClose] = useState(true)\r\n\r\n  const changeUnmountOnClose = e => {\r\n    const value = e.target.value\r\n    setUnmountOnClose(JSON.parse(value))\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Form onSubmit={e => e.preventDefault()}>\r\n        <Row>\r\n          <Col className='mb-sm-0 mb-1' sm='6' md='4' lg='2'>\r\n            <Input type='select' name='unmountOnClose' id='unmountOnClose' onChange={e => changeUnmountOnClose(e)}>\r\n              <option value='true'>true</option>\r\n              <option value='false'>false</option>\r\n            </Input>\r\n          </Col>\r\n          <Col sm='6' md='4' lg='2'>\r\n            <Button color='success' onClick={() => setVisibility(!visibility)} outline>\r\n              Launch Modal\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n      <Modal isOpen={visibility} toggle={() => setVisibility(!visibility)} unmountOnClose={unmountOnClose}>\r\n        <ModalHeader toggle={() => setVisibility(!visibility)}>Modal title</ModalHeader>\r\n        <ModalBody>\r\n          <Input\r\n            type='textarea'\r\n            placeholder='Write something (data should remain in modal if unmountOnClose is set to false)'\r\n            rows={5}\r\n          />\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color='primary' onClick={() => setVisibility(!visibility)} outline>\r\n            Accept\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default ModalDestructuring\r\n","// ** React Imports\r\nimport { useState } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Label, Input } from 'reactstrap'\r\n\r\nconst ModalForm = () => {\r\n  // ** States\r\n  const [formModal, setFormModal] = useState(false)\r\n  const [firstModal, setFirstModal] = useState(false)\r\n  const [secondModal, setSecondModal] = useState(false)\r\n  const [scrollModal, setScrollModal] = useState(false)\r\n  const [scrollInnerModal, setScrollInnerModal] = useState(false)\r\n\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div>\r\n        <Button color='primary' outline onClick={() => setFormModal(!formModal)}>\r\n          Login Form\r\n        </Button>\r\n        <Modal isOpen={formModal} toggle={() => setFormModal(!formModal)} className='modal-dialog-centered'>\r\n          <ModalHeader toggle={() => setFormModal(!formModal)}>Login Form</ModalHeader>\r\n          <ModalBody>\r\n            <div className='mb-2'>\r\n              <Label className='form-label' for='email'>\r\n                Email:\r\n              </Label>\r\n              <Input type='email' id='email' placeholder='Email Address' />\r\n            </div>\r\n            <div className='mb-2'>\r\n              <Label className='form-label' for='password'>\r\n                Password:\r\n              </Label>\r\n              <Input type='password' id='password' placeholder='Password' />\r\n            </div>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setFormModal(!formModal)}>\r\n              Login\r\n            </Button>{' '}\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div>\r\n        <Button color='primary' outline onClick={() => setScrollModal(!scrollModal)}>\r\n          Scrolling Long Content\r\n        </Button>\r\n        <Modal isOpen={scrollModal} toggle={() => setScrollModal(!scrollModal)} className='modal-dialog-centered'>\r\n          <ModalHeader toggle={() => setScrollModal(!scrollModal)}>Modal Title</ModalHeader>\r\n          <ModalBody>\r\n            <p>\r\n              Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake fruitcake powder\r\n              pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah.\r\n            </p>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setScrollModal(!scrollModal)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div>\r\n        <Button color='primary' outline onClick={() => setScrollInnerModal(!scrollInnerModal)}>\r\n          Scrolling Content Inside Modal\r\n        </Button>\r\n        <Modal scrollable isOpen={scrollInnerModal} toggle={() => setScrollInnerModal(!scrollInnerModal)}>\r\n          <ModalHeader toggle={() => setScrollInnerModal(!scrollInnerModal)}>Modal Title</ModalHeader>\r\n          <ModalBody>\r\n            <p>\r\n              Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake fruitcake powder\r\n              pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah.\r\n            </p>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setScrollInnerModal(!scrollInnerModal)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div>\r\n        <Button color='primary' outline onClick={() => setFirstModal(!firstModal)}>\r\n          Toggle Between Modals\r\n        </Button>\r\n        <Modal isOpen={firstModal} toggle={() => setFirstModal(!firstModal)} className='modal-dialog-centered'>\r\n          <ModalHeader toggle={() => setFirstModal(!firstModal)}>Modal 1 </ModalHeader>\r\n          <ModalBody>Show a second modal and hide this one with the button below.</ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setSecondModal(!secondModal)}>\r\n              Open second modal\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n        <Modal isOpen={secondModal} toggle={() => setSecondModal(!secondModal)} className='modal-dialog-centered'>\r\n          <ModalHeader toggle={() => setSecondModal(!secondModal)}>Modal 2 </ModalHeader>\r\n          <ModalBody>Hide this modal and show the first with the button below.</ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setSecondModal(!secondModal)}>\r\n              Back to first\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default ModalForm\r\n","export const modalBasic = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\nimport React, { useState } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Alert } from 'reactstrap'\r\n\r\nconst ModalBasic = () => {\r\n  const [basicModal, setBasicModal] = useState(false)\r\n  const [centeredModal, setCenteredModal] = useState(false)\r\n  const [disabledModal, setDisabledModal] = useState(false)\r\n  const [disabledAnimation, setDisabledAnimation] = useState(false)\r\n\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div className='basic-modal'>\r\n        <Button color='primary' outline onClick={() => setBasicModal(!basicModal)}>\r\n          Vertically Centered\r\n        </Button>\r\n        <Modal isOpen={basicModal} toggle={() => setBasicModal(!basicModal)}>\r\n          <ModalHeader toggle={() => setBasicModal(!basicModal)}>Basic Modal</ModalHeader>\r\n          <ModalBody>\r\n            <h5>Check First Paragraph</h5>\r\n            Oat cake ice cream candy chocolate cake chocolate cake cotton candy dragée apple pie. Brownie carrot cake\r\n            candy canes bonbon fruitcake topping halvah. Cake sweet roll cake cheesecake cookie chocolate cake\r\n            liquorice.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setBasicModal(!basicModal)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div className='vertically-centered-modal'>\r\n        <Button color='primary' outline onClick={() => setCenteredModal(!centeredModal)}>\r\n          Launch Modal\r\n        </Button>\r\n        <Modal isOpen={centeredModal} toggle={() => setCenteredModal(!centeredModal)} className='modal-dialog-centered'>\r\n          <ModalHeader toggle={() => setCenteredModal(!centeredModal)}>Vertically Centered</ModalHeader>\r\n          <ModalBody>\r\n            Oat cake ice cream candy chocolate cake chocolate cake cotton candy dragée apple pie. Brownie carrot cake\r\n            candy canes bonbon fruitcake topping halvah. Cake sweet roll cake cheesecake cookie chocolate cake\r\n            liquorice.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setCenteredModal(!centeredModal)}>\r\n              Accept\r\n            </Button>{' '}\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div className='disabled-backdrop-modal'>\r\n        <React.Fragment>\r\n          <Button color='primary' outline onClick={() => setDisabledModal(!disabledModal)}>\r\n            Disabled Backdrop\r\n          </Button>\r\n          <Modal\r\n            isOpen={disabledModal}\r\n            toggle={() => setDisabledModal(!disabledModal)}\r\n            className='modal-dialog-centered'\r\n            backdrop={false}\r\n          >\r\n            <ModalHeader toggle={() => setDisabledModal(!disabledModal)}>Disabled Backdrop</ModalHeader>\r\n            <ModalBody>\r\n              Candy oat cake topping topping chocolate cake. Icing pudding jelly beans I love chocolate carrot cake\r\n              wafer candy canes. Biscuit croissant fruitcake bonbon soufflé.\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button color='primary' onClick={() => setDisabledModal(!disabledModal)}>\r\n                Accept\r\n              </Button>{' '}\r\n            </ModalFooter>\r\n          </Modal>\r\n        </React.Fragment>\r\n      </div>\r\n      <div className='disabled-animation-modal'>\r\n        <Button color='primary' outline onClick={() => setDisabledAnimation(!disabledAnimation)}>\r\n          Disabled Animation\r\n        </Button>\r\n        <Modal\r\n          isOpen={disabledAnimation}\r\n          toggle={() => setDisabledAnimation(!disabledAnimation)}\r\n          className='modal-dialog-centered'\r\n          fade={false}\r\n        >\r\n          <ModalHeader toggle={() => setDisabledAnimation(!disabledAnimation)}>Disabled Fade</ModalHeader>\r\n          <ModalBody>\r\n            Chocolate bar jelly dragée cupcake chocolate bar I love donut liquorice. Powder I love marzipan donut candy\r\n            canes jelly-o. Dragée liquorice apple pie candy biscuit danish lemon drops sugar plum.\r\n            <Alert className='mt-1' color='success'>\r\n              <div className='alert-body'>Well done! You successfully read this important alert message.</div>\r\n            </Alert>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setDisabledAnimation(!disabledAnimation)}>\r\n              Accept\r\n            </Button>{' '}\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default ModalBasic\r\n  `}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const modalTheme = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\nimport React, { useState } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\nconst ModalConfig = [\r\n  {\r\n    id: 1,\r\n    title: 'Primary',\r\n    modalColor: 'modal-primary',\r\n    btnColor: 'primary'\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'Secondary',\r\n    modalColor: 'modal-secondary',\r\n    btnColor: 'secondary'\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'Success',\r\n    modalColor: 'modal-success',\r\n    btnColor: 'success'\r\n  },\r\n {\r\n    id: 4,\r\n    title: 'Danger',\r\n    modalColor: 'modal-danger',\r\n    btnColor: 'danger'\r\n  },\r\n  {\r\n    id: 5,\r\n    title: 'Warning',\r\n    modalColor: 'modal-warning',\r\n    btnColor: 'warning'\r\n  },\r\n  {\r\n    id: 6,\r\n    title: 'Info',\r\n    modalColor: 'modal-info',\r\n    btnColor: 'info'\r\n  },\r\n  {\r\n    id: 7,\r\n    title: 'Dark',\r\n    modalColor: 'modal-dark',\r\n    btnColor: 'dark'\r\n  }\r\n]\r\n\r\nconst ModalTheme = () => {\r\n  const [modal, setModal] = useState(null)\r\n\r\n  const toggleModal = id => {\r\n    if (modal !== id) {\r\n      setModal(id)\r\n    } else {\r\n      setModal(null)\r\n    }\r\n  }\r\n\r\n  const renderModal = ModalConfig.map(item => {\r\n    return (\r\n      <div className={'theme-{item.modalColor}'} key={item.id}>\r\n        <Button color={item.btnColor} onClick={() => toggleModal(item.id)} key={item.title} outline>\r\n          {item.title}\r\n        </Button>\r\n        <Modal\r\n          isOpen={modal === item.id}\r\n          toggle={() => toggleModal(item.id)}\r\n          className='modal-dialog-centered'\r\n          modalClassName={item.modalColor}\r\n          key={item.id}\r\n        >\r\n          <ModalHeader toggle={() => toggleModal(item.id)}>{item.title}</ModalHeader>\r\n          <ModalBody>\r\n            Tart lemon drops macaroon oat cake chocolate toffee chocolate bar icing. Pudding jelly beans carrot cake\r\n            pastry gummies cheesecake lollipop. I love cookie lollipop cake I love sweet gummi bears cupcake dessert.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color={item.btnColor} onClick={() => toggleModal(item.id)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  })\r\n\r\n  return <div className='demo-inline-spacing'>{renderModal}</div>\r\n}\r\nexport default ModalTheme\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const modalSizes = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\nimport { Fragment, useState } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\nconst ModalConfig = [\r\n  {\r\n    id: 1,\r\n    btnTitle: 'Extra Small',\r\n    modalTitle: 'Extra Small modal',\r\n    modalClass: 'modal-xs'\r\n  },\r\n  {\r\n    id: 2,\r\n    btnTitle: 'Small Modal',\r\n    modalTitle: 'Small Modal',\r\n    modalClass: 'modal-sm'\r\n  },\r\n  {\r\n    id: 3,\r\n    btnTitle: 'Default Modal',\r\n    modalTitle: 'Default Modal',\r\n    modalClass: ''\r\n  },\r\n  {\r\n    id: 4,\r\n    btnTitle: 'Large Modal',\r\n    modalTitle: 'Large Modal',\r\n    modalClass: 'modal-lg'\r\n  },\r\n  {\r\n    id: 5,\r\n    btnTitle: 'Extra Large Modal',\r\n    modalTitle: 'Extra Large Modal',\r\n    modalClass: 'modal-xl'\r\n  },\r\n  {\r\n    id: 6,\r\n    btnTitle: 'Fullscreen Modal',\r\n    modalTitle: 'Fullscreen Modal',\r\n    modalClass: 'modal-fullscreen'\r\n  }\r\n]\r\n\r\nconst ModalSizes = () => {\r\n  const [modal, setModal] = useState(null)\r\n\r\n  const toggleModal = id => {\r\n    if (modal !== id) {\r\n      setModal(id)\r\n    } else {\r\n      setModal(null)\r\n    }\r\n  }\r\n\r\n  const renderModal = ModalConfig.map(item => {\r\n    return (\r\n      <Fragment key={item.id}>\r\n        <div>\r\n          <Button color='primary' onClick={() => toggleModal(item.id)} key={item.title} outline>\r\n            {item.btnTitle}\r\n          </Button>\r\n        </div>\r\n        <Modal\r\n          isOpen={modal === item.id}\r\n          toggle={() => toggleModal(item.id)}\r\n          className={'modal-dialog-centered {item.modalClass}'}\r\n          key={item.id}\r\n        >\r\n          <ModalHeader toggle={() => toggleModal(item.id)}>\r\n            {item.modalTitle}\r\n            {item.title}\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            {item.id === 6 ? (\r\n              <Fragment>\r\n                <p>\r\n                  Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas\r\n                  eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                </p>\r\n                <p>\r\n                  Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue\r\n                  laoreet rutrum faucibus dolor auctor.\r\n                </p>\r\n                <p>\r\n                  Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl\r\n                  consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                </p>\r\n                <p>\r\n                  Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas\r\n                  eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                </p>\r\n                <p>\r\n                  Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue\r\n                  laoreet rutrum faucibus dolor auctor.\r\n                </p>\r\n                <p>\r\n                  Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl\r\n                  consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                </p>\r\n                <p>\r\n                  Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas\r\n                  eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                </p>\r\n                <p>\r\n                  Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue\r\n                  laoreet rutrum faucibus dolor auctor.\r\n                </p>\r\n                <p>\r\n                  Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl\r\n                  consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                </p>\r\n                <p>\r\n                  Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas\r\n                  eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                </p>\r\n                <p>\r\n                  Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue\r\n                  laoreet rutrum faucibus dolor auctor.\r\n                </p>\r\n                <p>\r\n                  Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl\r\n                  consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                </p>\r\n                <p>\r\n                  Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas\r\n                  eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                </p>\r\n                <p>\r\n                  Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue\r\n                  laoreet rutrum faucibus dolor auctor.\r\n                </p>\r\n                <p>\r\n                  Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl\r\n                  consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                </p>\r\n                <p>\r\n                  Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas\r\n                  eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                </p>\r\n                <p>\r\n                  Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue\r\n                  laoreet rutrum faucibus dolor auctor.\r\n                </p>\r\n                <p>\r\n                  Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl\r\n                  consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                </p>\r\n              </Fragment>\r\n            ) : (\r\n              'Halvah powder wafer. Chupa chups pie topping carrot cake cake. Tootsie roll sesame snaps jelly-o marshmallow\r\n            marshmallow jelly jujubes candy. Chupa chups cheesecake gingerbread chupa chups cake candy canes sweet roll.'\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => toggleModal(item.id)} outline>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </Fragment>\r\n    )\r\n  })\r\n\r\n  return <div className='demo-inline-spacing'>{renderModal}</div>\r\n}\r\nexport default ModalSizes\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const modalEvents = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\nimport React, { useState } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\nconst ModalEvents = () => {\r\n  const [modalOpened, setModalOpened] = useState(false)\r\n  const [modalClosed, setModalClosed] = useState(false)\r\n\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div className='on-opened-modal'>\r\n        <Button color='primary' outline onClick={() => setModalOpened(!modalOpened)}>\r\n          On Opened\r\n        </Button>\r\n        <Modal\r\n          isOpen={modalOpened}\r\n          onOpened={() => alert('On Opened Event Fired')}\r\n          toggle={() => setModalOpened(!modalOpened)}\r\n          className='modal-dialog-centered'\r\n        >\r\n          <ModalHeader toggle={() => setModalOpened(!modalOpened)}>Basic Modal</ModalHeader>\r\n          <ModalBody>\r\n            Donut chocolate halvah I love caramels. Dessert croissant I love icing I love dragée candy canes chocolate\r\n            bar. Oat cake lollipop I love cake chocolate bar jelly sweet. I love cotton candy oat cake jelly.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setModalOpened(!modalOpened)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div className='on-closed-modal'>\r\n        <Button color='primary' outline onClick={() => setModalClosed(!modalClosed)}>\r\n          On Closed\r\n        </Button>\r\n        <Modal\r\n          isOpen={modalClosed}\r\n          onClosed={() => alert('On Closed Event Fired')}\r\n          toggle={() => setModalClosed(!modalClosed)}\r\n          className='modal-dialog-centered'\r\n        >\r\n          <ModalHeader toggle={() => setModalClosed(!modalClosed)}>Basic Modal</ModalHeader>\r\n          <ModalBody>\r\n            Donut chocolate halvah I love caramels. Dessert croissant I love icing I love dragée candy canes chocolate\r\n            bar. Oat cake lollipop I love cake chocolate bar jelly sweet. I love cotton candy oat cake jelly.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setModalClosed(!modalClosed)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalEvents`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const modalForm = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\nimport { useState } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Label, Input } from 'reactstrap'\r\n\r\nconst ModalForm = () => {\r\n  const [formModal, setFormModal] = useState(false)\r\n  const [firstModal, setFirstModal] = useState(false)\r\n  const [secondModal, setSecondModal] = useState(false)\r\n  const [scrollModal, setScrollModal] = useState(false)\r\n  const [scrollInnerModal, setScrollInnerModal] = useState(false)\r\n\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div>\r\n        <Button color='primary' outline onClick={() => setFormModal(!formModal)}>\r\n          Login Form\r\n        </Button>\r\n        <Modal isOpen={formModal} toggle={() => setFormModal(!formModal)} className='modal-dialog-centered'>\r\n          <ModalHeader toggle={() => setFormModal(!formModal)}>Login Form</ModalHeader>\r\n          <ModalBody>\r\n            <div className='mb-2'>\r\n              <Label className='form-label' for='email'>Email:</Label>\r\n              <Input type='email' id='email' placeholder='Email Address' />\r\n            </div>\r\n            <div className='mb-2'>\r\n              <Label className='form-label' for='password'>Password:</Label>\r\n              <Input type='password' id='password' placeholder='Password' />\r\n            </div>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setFormModal(!formModal)}>\r\n              Login\r\n            </Button>{' '}\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div>\r\n        <Button color='primary' outline onClick={() => setScrollModal(!scrollModal)}>\r\n          Scrolling Long Content\r\n        </Button>\r\n        <Modal isOpen={scrollModal} toggle={() => setScrollModal(!scrollModal)} className='modal-dialog-centered'>\r\n          <ModalHeader toggle={() => setScrollModal(!scrollModal)}>Modal Title</ModalHeader>\r\n          <ModalBody>\r\n            <p>\r\n              Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake fruitcake powder\r\n              pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah.\r\n            </p>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setScrollModal(!scrollModal)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div>\r\n        <Button color='primary' outline onClick={() => setScrollInnerModal(!scrollInnerModal)}>\r\n          Scrolling Content Inside Modal\r\n        </Button>\r\n        <Modal scrollable isOpen={scrollInnerModal} toggle={() => setScrollInnerModal(!scrollInnerModal)}>\r\n          <ModalHeader toggle={() => setScrollInnerModal(!scrollInnerModal)}>Modal Title</ModalHeader>\r\n          <ModalBody>\r\n            <p>\r\n              Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake fruitcake powder\r\n              pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah.\r\n            </p>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setScrollInnerModal(!scrollInnerModal)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div>\r\n        <Button color='primary' outline onClick={() => setFirstModal(!firstModal)}>\r\n          Toggle Between Modals\r\n        </Button>\r\n        <Modal isOpen={firstModal} toggle={() => setFirstModal(!firstModal)} className='modal-dialog-centered'>\r\n          <ModalHeader toggle={() => setFirstModal(!firstModal)}>Modal 1 </ModalHeader>\r\n          <ModalBody>Show a second modal and hide this one with the button below.</ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setSecondModal(!secondModal)}>\r\n              Open second modal\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n        <Modal isOpen={secondModal} toggle={() => setSecondModal(!secondModal)} className='modal-dialog-centered'>\r\n          <ModalHeader toggle={() => setSecondModal(!secondModal)}>Modal 2 </ModalHeader>\r\n          <ModalBody>Hide this modal and show the first with the button below.</ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setSecondModal(!secondModal)}>\r\n              Back to first\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default ModalForm\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const modalUnmount = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Form, Row, Col } from 'reactstrap'\r\n\r\nconst ModalDestructuring = () => {\r\n  const [visibility, setVisibility] = useState(false)\r\n  const [unmountOnClose, setUnmountOnClose] = useState(true)\r\n\r\n  const changeUnmountOnClose = e => {\r\n    let value = e.target.value\r\n    setUnmountOnClose(JSON.parse(value))\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Form onSubmit={e => e.preventDefault()}>\r\n        <Row>\r\n          <Col className='mb-sm-0 mb-1' sm='6' md='4' lg='2'>\r\n            <Input type='select' name='unmountOnClose' id='unmountOnClose' onChange={e => changeUnmountOnClose(e)}>\r\n              <option value='true'>true</option>\r\n              <option value='false'>false</option>\r\n            </Input>\r\n          </Col>\r\n          <Col sm='6' md='4' lg='2'>\r\n            <Button color='success' onClick={() => setVisibility(!visibility)} outline>\r\n              Launch Modal\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n      <Modal isOpen={visibility} toggle={() => setVisibility(!visibility)} unmountOnClose={unmountOnClose}>\r\n        <ModalHeader toggle={() => setVisibility(!visibility)}>Modal title</ModalHeader>\r\n        <ModalBody>\r\n          <Input\r\n            type='textarea'\r\n            placeholder='Write something (data should remain in modal if unmountOnClose is set to false)'\r\n            rows={5}\r\n          />\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color='primary' onClick={() => setVisibility(!visibility)} outline>\r\n            Accept\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default ModalDestructuring\r\n        `}\r\n    </code>\r\n  </pre>\r\n)\r\n","// ** React Imports\r\nimport { Fragment, useEffect } from 'react'\r\n\r\n// ** Third Party Components\r\nimport Prism from 'prismjs'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col, CardText } from 'reactstrap'\r\n\r\n// ** Demo Components\r\nimport ModalBasic from './ModalBasic'\r\nimport ModalSizes from './ModalSizes'\r\nimport ModalThemes from './ModalThemes'\r\nimport ModalEvents from './ModalEvents'\r\nimport ModalUnmount from './ModalUnmount'\r\nimport ModalFormAndScroll from './ModalFormAndScroll'\r\n\r\n// ** Custom Components\r\nimport Card from '@components/card-snippet'\r\nimport BreadCrumbs from '@components/breadcrumbs'\r\n\r\n// ** Source Code\r\nimport { modalBasic, modalTheme, modalSizes, modalEvents, modalForm, modalUnmount } from './ModalSourceCode'\r\n\r\nconst Modals = () => {\r\n  useEffect(() => {\r\n    Prism.highlightAll()\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <BreadCrumbs breadCrumbTitle='Modal' breadCrumbParent='Components' breadCrumbActive='Modal' />\r\n      <Row>\r\n        <Col sm='12'>\r\n          <Card title='Modal Basic' code={modalBasic}>\r\n            <CardText className='mb-0'>\r\n              Use <code>Modal</code>, <code>ModalBody</code> and <code>ModalFooter</code> tags to create a Modal with\r\n              reactstrap.\r\n            </CardText>\r\n            <ModalBasic />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col sm='12'>\r\n          <Card title='Modal Themes' code={modalTheme}>\r\n            <CardText className='mb-0'>\r\n              Use class <code>.modal-[color]</code> with your <code>.modal</code> to change theme of modal\r\n            </CardText>\r\n            <ModalThemes />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Modal Sizes' code={modalSizes}>\r\n            <CardText className='mb-0'>\r\n              Use class <code>.modal-[xs/sm/lg/xl]</code> with <code>ModalHeader</code> to change modal Size.\r\n            </CardText>\r\n            <ModalSizes />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Modal Events' code={modalEvents}>\r\n            <CardText className='mb-0'>\r\n              Use props <code>onClosed / onOpened</code> for modal events.\r\n            </CardText>\r\n            <ModalEvents />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col sm='12'>\r\n          <Card title='Form & Scrolling Modals' code={modalForm}>\r\n            <ModalFormAndScroll />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Unmount On Close' code={modalUnmount}>\r\n            <CardText>Write something (data should remain in modal if unmountOnClose is set to false).</CardText>\r\n            <ModalUnmount />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Modals\r\n","// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Breadcrumb,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  BreadcrumbItem,\r\n  DropdownToggle,\r\n  UncontrolledButtonDropdown\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-md-9 col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {breadCrumbTitle ? <h2 className='content-header-title float-start mb-0'>{breadCrumbTitle}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/'>Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem tag='li' className='text-primary'>\r\n                  {breadCrumbParent}\r\n                </BreadcrumbItem>\r\n                {breadCrumbParent2 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent2}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbParent3 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent3}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                <BreadcrumbItem tag='li' active>\r\n                  {breadCrumbActive}\r\n                </BreadcrumbItem>\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='content-header-right text-md-end col-md-3 col-12 d-md-block d-none'>\r\n        <div className='breadcrumb-right dropdown'>\r\n          <UncontrolledButtonDropdown>\r\n            <DropdownToggle color='primary' size='sm' className='btn-icon btn-round dropdown-toggle'>\r\n              <Grid size={14} />\r\n            </DropdownToggle>\r\n            <DropdownMenu tag='ul' end>\r\n              <DropdownItem tag={Link} to='/apps/focus'>\r\n                <CheckSquare className='me-1' size={14} />\r\n                <span className='align-middle'>Focus</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/instafriend'>\r\n                <MessageSquare className='me-1' size={14} />\r\n                <span className='align-middle'>Instafriend</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/tellfari'>\r\n                <Mail className='me-1' size={14} />\r\n                <span className='align-middle'>Tellfari</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/book'>\r\n                <Calendar className='me-1' size={14} />\r\n                <span className='align-middle'>Book</span>\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledButtonDropdown>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  breadCrumbTitle: Proptypes.string.isRequired,\r\n  breadCrumbActive: Proptypes.string.isRequired\r\n}\r\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport { Code } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardBody, CardTitle, Collapse } from 'reactstrap'\r\n\r\nconst CardSnippet = props => {\r\n  // ** Props\r\n  const { title, children, noBody, code, iconCode } = props\r\n\r\n  // ** State\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  // ** If user passes custom icon then render that else render default icon\r\n  const IconCode = iconCode ? iconCode : <Code size={15} />\r\n\r\n  // ** To toggle collapse\r\n  const toggle = () => setIsOpen(!isOpen)\r\n\r\n  // ** If user passes noBody then return <Fragment> else return <CardBody>\r\n  const Wrapper = noBody ? Fragment : CardBody\r\n\r\n  return (\r\n    <Card className='card-snippet'>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>{title}</CardTitle>\r\n        <div className='views cursor-pointer' onClick={toggle}>\r\n          {IconCode}\r\n        </div>\r\n      </CardHeader>\r\n      <Wrapper>{children}</Wrapper>\r\n      <Collapse isOpen={isOpen}>\r\n        <CardBody>{code}</CardBody>\r\n      </Collapse>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CardSnippet\r\n\r\n// ** PropTypes\r\nCardSnippet.propTypes = {\r\n  code: PropTypes.node,\r\n  noBody: PropTypes.bool,\r\n  children: PropTypes.any,\r\n  iconCode: PropTypes.node,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string.isRequired\r\n}\r\n"],"sourceRoot":""}